!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("pinata-sdk",[],t):"object"==typeof exports?exports["pinata-sdk"]=t():e["pinata-sdk"]=t()}("undefined"!=typeof self?self:this,(function(){return(()=>{var e={"./src/commands/data/pinList/pinList.js":
/*!**********************************************!*\
  !*** ./src/commands/data/pinList/pinList.js ***!
  \**********************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r(/*! ./queryBuilder */"./src/commands/data/pinList/queryBuilder.js");function s(e,t,r,n,s,o,a){try{var i=e[o](a),c=i.value}catch(e){return void r(e)}i.done?t(c):Promise.resolve(c).then(n,s)}function o(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function i(e){s(a,n,o,i,c,"next",e)}function c(e){s(a,n,o,i,c,"throw",e)}i(void 0)}))}}function a(){return(a=o(regeneratorRuntime.mark((function e(t){var r,s;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return"data/pinList",r=(0,n.default)("data/pinList",t),e.prev=2,e.next=5,this.fetch(r);case 5:if(200===(s=e.sent).status){e.next=10;break}throw new Error("unknown server response while attempting to retrieve user pin list: ".concat(s));case 10:return e.next=12,s.json();case 12:return e.abrupt("return",e.sent);case 13:e.next=19;break;case 15:throw e.prev=15,e.t0=e.catch(2),this.handleError(e.t0);case 19:case"end":return e.stop()}}),e,this,[[2,15]])})))).apply(this,arguments)}const i=function(e){return a.apply(this,arguments)}},"./src/commands/data/pinList/queryBuilder.js":
/*!***************************************************!*\
  !*** ./src/commands/data/pinList/queryBuilder.js ***!
  \***************************************************/(e,t,r)=>{"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e){var t=new Date(Date.parse(e));try{if(t.toISOString()===e)return e;throw new Error("dates must be in valid ISO_8601 format")}catch(e){throw new Error("dates must be in valid ISO_8601 format")}}function o(e,t){var r="".concat(e,"?"),o="";if(t){if(t.hashContains){if("string"!=typeof t.hashContains)throw new Error("hashContains value is not a string");r+="hashContains=".concat(t.hashContains,"&")}if(t.pinStart&&(r+="pinStart=".concat(s(t.pinStart),"&")),t.pinEnd&&(r+="pinEnd=".concat(s(t.pinEnd),"&")),t.unpinStart&&(r+="unpinStart=".concat(s(t.unpinStart),"&")),t.unpinEnd&&(r+="unpinEnd=".concat(s(t.unpinEnd),"&")),t.pinSizeMin){if(isNaN(t.pinSizeMin)||t.pinSizeMin<0)throw new Error("Please make sure the pinSizeMin is a valid positive integer");r+="pinSizeMin=".concat(t.pinSizeMin,"&")}if(t.pinSizeMax){if(isNaN(t.pinSizeMax)||t.pinSizeMax<0)throw new Error("Please make sure the pinSizeMax is a valid positive integer");r+="pinSizeMax=".concat(t.pinSizeMax,"&")}if(t.status){if("all"!==t.status&&"pinned"!==t.status&&"unpinned"!==t.status)throw new Error("status value must be either: all, pinned, or unpinned");r+="status=".concat(t.status,"&")}if(t.pageLimit){if(isNaN(t.pageLimit)||t.pageLimit<=0||t.pageLimit>1e3)throw new Error("Please make sure the pageLimit is a valid integer between 1-1000");r+="pageLimit=".concat(parseInt(t.pageLimit),"&")}if(t.pageOffset){if(isNaN(t.pageOffset)||t.pageOffset<=0)throw new Error("Please make sure the pageOffset is a positive integer");r+="pageOffset=".concat(parseInt(t.pageOffset),"&")}if(t.metadata){if("object"!==n(t.metadata))throw new Error("metadata value must be an object");if(t.metadata.name&&(o="metadata[name]=".concat(t.metadata.name,"&")),t.metadata.keyvalues){if(o+="metadata[keyvalues]=","object"!==n(t.metadata.keyvalues))throw new Error("metadata keyvalues must be an object");var a={};Object.entries(t.metadata.keyvalues).forEach((function(e){var t=e[0],r=e[1];if("object"!==n(r))throw new Error("keyValue: ".concat(t," is not an object"));if(!r||!r.value||!r.op)throw new Error("keyValue: ".concat(t," must have both value and op attributes"));if("string"!=typeof r.value&&"boolean"!=typeof r.value&&"number"!=typeof r.value)throw new Error("Metadata keyvalue values must be strings, booleans, or numbers");switch(r.op){case"gt":case"gte":case"lt":case"lte":case"ne":case"eq":a[t]={value:r.value,op:r.op};break;case"between":if(!r.secondValue)throw new Error("Because between op code was passed in, keyValue: ".concat(e[0]," must have both also include a secondValue"));if("string"!=typeof r.secondValue&&"boolean"!=typeof r.secondValue&&"number"!=typeof r.secondValue)throw new Error("Metadata keyvalue secondValue must be a string, boolean, or number");a[t]={value:r.value,op:r.op,secondValue:r.secondValue};break;case"notBetween":if(!r.secondValue)throw new Error("Because notBetween op code was passed in, keyValue: ".concat(e[0]," must have both also include a secondValue"));if("string"!=typeof r.secondValue&&"boolean"!=typeof r.secondValue&&"number"!=typeof r.secondValue)throw new Error("Metadata keyvalue secondValue must be a string, boolean, or number");a[t]={value:r.value,op:r.op,secondValue:r.secondValue};break;case"like":case"notLike":case"iLike":case"notILike":case"regexp":case"iRegexp":a[t]={value:r.value,op:r.op};break;default:throw new Error("keyValue op: ".concat(r.op," is not a valid op code"))}})),o+="".concat(JSON.stringify(a))}}}return"".concat(r).concat(o)}r.r(t),r.d(t,{default:()=>o})},"./src/commands/data/testAuthentication.js":
/*!*************************************************!*\
  !*** ./src/commands/data/testAuthentication.js ***!
  \*************************************************/(e,t,r)=>{"use strict";function n(e,t,r,n,s,o,a){try{var i=e[o](a),c=i.value}catch(e){return void r(e)}i.done?t(c):Promise.resolve(c).then(n,s)}function s(e){return function(){var t=this,r=arguments;return new Promise((function(s,o){var a=e.apply(t,r);function i(e){n(a,s,o,i,c,"next",e)}function c(e){n(a,s,o,i,c,"throw",e)}i(void 0)}))}}function o(){return a.apply(this,arguments)}function a(){return(a=s(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return"data/testAuthentication",e.prev=1,e.next=4,this.fetch("data/testAuthentication");case 4:if(200===(t=e.sent).status){e.next=9;break}throw new Error("unknown server response while authenticating: ".concat(t));case 9:return e.abrupt("return",{authenticated:!0});case 10:e.next=16;break;case 12:throw e.prev=12,e.t0=e.catch(1),this.handleError(e.t0);case 16:case"end":return e.stop()}}),e,this,[[1,12]])})))).apply(this,arguments)}r.r(t),r.d(t,{default:()=>o})},"./src/commands/data/userPinnedDataTotal.js":
/*!**************************************************!*\
  !*** ./src/commands/data/userPinnedDataTotal.js ***!
  \**************************************************/(e,t,r)=>{"use strict";function n(e,t,r,n,s,o,a){try{var i=e[o](a),c=i.value}catch(e){return void r(e)}i.done?t(c):Promise.resolve(c).then(n,s)}function s(e){return function(){var t=this,r=arguments;return new Promise((function(s,o){var a=e.apply(t,r);function i(e){n(a,s,o,i,c,"next",e)}function c(e){n(a,s,o,i,c,"throw",e)}i(void 0)}))}}function o(){return a.apply(this,arguments)}function a(){return(a=s(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return"data/userPinnedDataTotal",e.prev=1,e.next=4,this.fetch("data/userPinnedDataTotal");case 4:if(200===(t=e.sent).status){e.next=9;break}throw new Error("unknown server response while attempting to retrieve pinned data total: ".concat(t));case 9:return e.next=11,t.json();case 11:return e.abrupt("return",e.sent);case 12:e.next=18;break;case 14:throw e.prev=14,e.t0=e.catch(1),this.handleError(e.t0);case 18:case"end":return e.stop()}}),e,this,[[1,14]])})))).apply(this,arguments)}r.r(t),r.d(t,{default:()=>o})},"./src/commands/pinning/hashMetadata.js":
/*!**********************************************!*\
  !*** ./src/commands/pinning/hashMetadata.js ***!
  \**********************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r(/*! is-ipfs */"./node_modules/is-ipfs/src/index.js"),s=r.n(n);function o(e,t,r,n,s,o,a){try{var i=e[o](a),c=i.value}catch(e){return void r(e)}i.done?t(c):Promise.resolve(c).then(n,s)}function a(e){return function(){var t=this,r=arguments;return new Promise((function(n,s){var a=e.apply(t,r);function i(e){o(a,n,s,i,c,"next",e)}function c(e){o(a,n,s,i,c,"throw",e)}i(void 0)}))}}function i(e,t){return c.apply(this,arguments)}function c(){return(c=a(regeneratorRuntime.mark((function e(t,r){var n,o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t){e.next=2;break}throw new Error("ipfsPinHash value is required for changing the pin policy of a pin");case 2:if(s().cid(t)){e.next=4;break}throw new Error("ipfsPinHash value is an invalid IPFS CID");case 4:if(r){e.next=6;break}throw new Error("no metadata object provided");case 6:return this.validateMetadata(r),"pinning/hashMetadata",n={ipfsPinHash:t},r.name&&(n.name=r.name),r.keyvalues&&(n.keyvalues=r.keyvalues),e.prev=11,e.next=14,this.put("pinning/hashMetadata",n);case 14:if(200===(o=e.sent).status){e.next=19;break}throw new Error("unknown server response while changing metadata for hash: ".concat(o));case 19:return e.next=21,o.json();case 21:return e.abrupt("return",e.sent);case 22:e.next=28;break;case 24:throw e.prev=24,e.t0=e.catch(11),this.handleError(e.t0);case 28:case"end":return e.stop()}}),e,this,[[11,24]])})))).apply(this,arguments)}},"./src/commands/pinning/hashPinPolicy.js":
/*!***********************************************!*\
  !*** ./src/commands/pinning/hashPinPolicy.js ***!
  \***********************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r(/*! is-ipfs */"./node_modules/is-ipfs/src/index.js"),s=r.n(n);function o(e,t,r,n,s,o,a){try{var i=e[o](a),c=i.value}catch(e){return void r(e)}i.done?t(c):Promise.resolve(c).then(n,s)}function a(e){return function(){var t=this,r=arguments;return new Promise((function(n,s){var a=e.apply(t,r);function i(e){o(a,n,s,i,c,"next",e)}function c(e){o(a,n,s,i,c,"throw",e)}i(void 0)}))}}function i(e,t){return c.apply(this,arguments)}function c(){return(c=a(regeneratorRuntime.mark((function e(t,r){var n,o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.validatePinPolicyStructure(r),t){e.next=3;break}throw new Error("ipfsPinHash value is required for changing the pin policy of a pin");case 3:if(s().cid(t)){e.next=5;break}throw new Error("ipfsPinHash value is an invalid IPFS CID");case 5:if(r){e.next=7;break}throw new Error("newPinPolicy is required for changing the pin policy of a pin");case 7:return"pinning/hashPinPolicy",n={ipfsPinHash:t,newPinPolicy:r},e.prev=9,e.next=12,this.put("pinning/hashPinPolicy",n);case 12:if(200===(o=e.sent).status){e.next=15;break}throw new Error("unknown server response while changing pin policy for hash: ".concat(o));case 15:return e.next=17,o.json();case 17:return e.abrupt("return",e.sent);case 20:throw e.prev=20,e.t0=e.catch(9),this.handleError(e.t0);case 24:case"end":return e.stop()}}),e,this,[[9,20]])})))).apply(this,arguments)}},"./src/commands/pinning/pinByHash.js":
/*!*******************************************!*\
  !*** ./src/commands/pinning/pinByHash.js ***!
  \*******************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r(/*! is-ipfs */"./node_modules/is-ipfs/src/index.js"),s=r.n(n);function o(e,t,r,n,s,o,a){try{var i=e[o](a),c=i.value}catch(e){return void r(e)}i.done?t(c):Promise.resolve(c).then(n,s)}function a(e){return function(){var t=this,r=arguments;return new Promise((function(n,s){var a=e.apply(t,r);function i(e){o(a,n,s,i,c,"next",e)}function c(e){o(a,n,s,i,c,"throw",e)}i(void 0)}))}}function i(e,t){return c.apply(this,arguments)}function c(){return(c=a(regeneratorRuntime.mark((function e(t,r){var n,o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t){e.next=2;break}throw new Error("hashToPin value is required for pinning by hash");case 2:if(s().cid(t)){e.next=4;break}throw new Error("hashToPin value is an invalid IPFS CID");case 4:return"pinning/pinByHash",n={hashToPin:t,pinataOptions:{}},r&&(r.pinataOptions&&(n.pinataOptions=r.pinataOptions),r.pinataMetadata&&(this.validateMetadata(r.pinataMetadata),n.pinataMetadata=r.pinataMetadata)),e.prev=7,e.next=10,this.post("pinning/pinByHash",n);case 10:if(200===(o=e.sent).status){e.next=13;break}throw new Error("unknown server response while adding to pin queue: ".concat(o));case 13:return e.next=15,o.json();case 15:return e.abrupt("return",e.sent);case 18:throw e.prev=18,e.t0=e.catch(7),handleError(e.t0);case 22:case"end":return e.stop()}}),e,this,[[7,18]])})))).apply(this,arguments)}},"./src/commands/pinning/pinFileToIPFS.js":
/*!***********************************************!*\
  !*** ./src/commands/pinning/pinFileToIPFS.js ***!
  \***********************************************/(e,t,r)=>{"use strict";function n(e,t,r,n,s,o,a){try{var i=e[o](a),c=i.value}catch(e){return void r(e)}i.done?t(c):Promise.resolve(c).then(n,s)}function s(e){return function(){var t=this,r=arguments;return new Promise((function(s,o){var a=e.apply(t,r);function i(e){n(a,s,o,i,c,"next",e)}function c(e){n(a,s,o,i,c,"throw",e)}i(void 0)}))}}function o(e,t){return a.apply(this,arguments)}function a(){return(a=s(regeneratorRuntime.mark((function e(t,r){var n,s;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=new FormData,"pinning/pinFileToIPFS",n.append("file",t),r&&(r.pinataMetadata&&(this.validateMetadata(r.pinataMetadata),n.append("pinataMetadata",JSON.stringify(r.pinataMetadata))),r.pinataOptions&&(this.validatePinataOptions(r.pinataOptions),n.append("pinataOptions",JSON.stringify(r.pinataOptions)))),e.prev=4,e.next=7,this.post("pinning/pinFileToIPFS",n);case 7:if(200===(s=e.sent).status){e.next=10;break}throw new Error("unknown server response while pinning File to IPFS: ".concat(s));case 10:return e.next=12,s.json();case 12:return e.abrupt("return",e.sent);case 15:throw e.prev=15,e.t0=e.catch(4),this.handleError(e.t0);case 19:case"end":return e.stop()}}),e,this,[[4,15]])})))).apply(this,arguments)}r.r(t),r.d(t,{default:()=>o})},"./src/commands/pinning/pinJSONToIPFS.js":
/*!***********************************************!*\
  !*** ./src/commands/pinning/pinJSONToIPFS.js ***!
  \***********************************************/(e,t,r)=>{"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t,r,n,s,o,a){try{var i=e[o](a),c=i.value}catch(e){return void r(e)}i.done?t(c):Promise.resolve(c).then(n,s)}function o(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function i(e){s(a,n,o,i,c,"next",e)}function c(e){s(a,n,o,i,c,"throw",e)}i(void 0)}))}}function a(e,t){return i.apply(this,arguments)}function i(){return(i=o(regeneratorRuntime.mark((function e(t,r){var s,o;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(s=t,"object"===n(t)){e.next=3;break}throw new Error("body must be a valid JSON object");case 3:return r&&(s={pinataContent:t},r.pinataMetadata&&(this.validateMetadata(r.pinataMetadata),s.pinataMetadata=r.pinataMetadata),r.pinataOptions&&(this.validatePinataOptions(r.pinataOptions),s.pinataOptions=r.pinataOptions)),"pinning/pinJSONToIPFS",e.prev=5,e.next=8,this.postJSON("pinning/pinJSONToIPFS",s,{headers:{"Content-Type":"application/json"}});case 8:if(200===(o=e.sent).status){e.next=11;break}throw new Error("unknown server response while pinning JSON to IPFS: ".concat(o));case 11:return console.log("pinJSONToIPFS raw result",o),e.next=14,o.json();case 14:return e.abrupt("return",e.sent);case 17:throw e.prev=17,e.t0=e.catch(5),this.handleError(e.t0);case 21:case"end":return e.stop()}}),e,this,[[5,17]])})))).apply(this,arguments)}r.r(t),r.d(t,{default:()=>a})},"./src/commands/pinning/pinJobs/pinJobs.js":
/*!*************************************************!*\
  !*** ./src/commands/pinning/pinJobs/pinJobs.js ***!
  \*************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>a});var n=r(/*! ./queryBuilder */"./src/commands/pinning/pinJobs/queryBuilder.js");function s(e,t,r,n,s,o,a){try{var i=e[o](a),c=i.value}catch(e){return void r(e)}i.done?t(c):Promise.resolve(c).then(n,s)}function o(e){return function(){var t=this,r=arguments;return new Promise((function(n,o){var a=e.apply(t,r);function i(e){s(a,n,o,i,c,"next",e)}function c(e){s(a,n,o,i,c,"throw",e)}i(void 0)}))}}function a(e){return i.apply(this,arguments)}function i(){return(i=o(regeneratorRuntime.mark((function e(t){var r,s;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r="pinning/pinJobs",t&&(r=(0,n.default)(r,t)),e.prev=2,e.next=5,this.fetch(r);case 5:if(200===(s=e.sent).status){e.next=10;break}throw new Error("unknown server response while attempting to retrieve pin jobs: ".concat(s));case 10:return e.next=12,s.json();case 12:return e.abrupt("return",e.sent);case 13:e.next=19;break;case 15:throw e.prev=15,e.t0=e.catch(2),this.handleError(e.t0);case 19:case"end":return e.stop()}}),e,this,[[2,15]])})))).apply(this,arguments)}},"./src/commands/pinning/pinJobs/queryBuilder.js":
/*!******************************************************!*\
  !*** ./src/commands/pinning/pinJobs/queryBuilder.js ***!
  \******************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>o});var n=r(/*! is-ipfs */"./node_modules/is-ipfs/src/index.js"),s=r.n(n);function o(e){if(!e)return this.baseUrl;var t=baseUrl,r=!1;function n(e){r?t="".concat(t,"&").concat(e):(r=!0,t="".concat(t,"?").concat(e))}if(e){if(e.sort){if("ASC"!==e.sort&&"DESC"!==e.sort)throw new Error("Unknown sort value: ".concat(e.sort," provided"));n("sort=".concat(e.sort))}if(e.status){if("searching"!==e.status&&"expired"!==e.status&&"over_free_limit"!==e.status&&"over_max_size"!==e.status&&"invalid_object"!==e.status&&"bad_host_node"!==e.status)throw new Error("Unknown status value: ".concat(e.status," provided"));n("status=".concat(e.status))}if(e.ipfs_pin_hash){if(!s().cid(e.ipfs_pin_hash))throw new Error("Invalid IPFS hash: ".concat(e.ipfs_pin_hash));n("ipfs_pin_hash=".concat(e.ipfs_pin_hash))}if(e.limit){if(!(Number.isInteger(e.limit)&&e.limit>0&&e.limit<100))throw new Error("Invalid limit: ".concat(e.limit,". Valid limits are 1-100"));n("limit=".concat(e.limit))}if(e.offset){if(!(Number.isInteger(e.offset)&&e.offset>0))throw new Error("Invalid offset: ".concat(e.offset,". Please provide a positive integer for the offset"));n("offset=".concat(e.offset))}}return t}},"./src/commands/pinning/unpin.js":
/*!***************************************!*\
  !*** ./src/commands/pinning/unpin.js ***!
  \***************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>i});var n=r(/*! is-ipfs */"./node_modules/is-ipfs/src/index.js"),s=r.n(n);function o(e,t,r,n,s,o,a){try{var i=e[o](a),c=i.value}catch(e){return void r(e)}i.done?t(c):Promise.resolve(c).then(n,s)}function a(e){return function(){var t=this,r=arguments;return new Promise((function(n,s){var a=e.apply(t,r);function i(e){o(a,n,s,i,c,"next",e)}function c(e){o(a,n,s,i,c,"throw",e)}i(void 0)}))}}function i(e){return c.apply(this,arguments)}function c(){return(c=a(regeneratorRuntime.mark((function e(t){var r,n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t){e.next=2;break}throw new Error("hashToUnpin value is required for removing a pin from Pinata");case 2:if(s().cid(t)){e.next=4;break}throw new Error("".concat(t," is an invalid IPFS CID"));case 4:return r="pinning/unpin/".concat(t),e.prev=5,e.next=8,this.del(r);case 8:if(200===(n=e.sent).status){e.next=11;break}throw new Error("unknown server response while removing pin from IPFS: ".concat(n));case 11:return e.abrupt("return",!0);case 14:throw e.prev=14,e.t0=e.catch(5),this.handleError(e.t0);case 18:case"end":return e.stop()}}),e,this,[[5,14]])})))).apply(this,arguments)}},"./src/commands/pinning/userPinPolicy.js":
/*!***********************************************!*\
  !*** ./src/commands/pinning/userPinPolicy.js ***!
  \***********************************************/(e,t,r)=>{"use strict";function n(e,t,r,n,s,o,a){try{var i=e[o](a),c=i.value}catch(e){return void r(e)}i.done?t(c):Promise.resolve(c).then(n,s)}function s(e){return function(){var t=this,r=arguments;return new Promise((function(s,o){var a=e.apply(t,r);function i(e){n(a,s,o,i,c,"next",e)}function c(e){n(a,s,o,i,c,"throw",e)}i(void 0)}))}}function o(e){return a.apply(this,arguments)}function a(){return(a=s(regeneratorRuntime.mark((function e(t){var r,n;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(this.validatePinPolicyStructure(t),t){e.next=3;break}throw new Error("newPinPolicy is required for changing the pin policy of a pin");case 3:return"pinning/userPinPolicy",r={newPinPolicy:t},e.prev=5,e.next=8,this.put("pinning/userPinPolicy",r);case 8:if(200===(n=e.sent).status){e.next=11;break}throw new Error("unknown server response while changing pin policy for user: ".concat(n));case 11:return e.next=13,n.json();case 13:return e.abrupt("return",e.sent);case 16:throw e.prev=16,e.t0=e.catch(5),this.handleError(e.t0);case 20:case"end":return e.stop()}}),e,this,[[5,16]])})))).apply(this,arguments)}r.r(t),r.d(t,{default:()=>o})},"./src/util/errorResponse.js":
/*!***********************************!*\
  !*** ./src/util/errorResponse.js ***!
  \***********************************/(e,t,r)=>{"use strict";function n(e){return e&&e.response&&e.response&&e.response.data&&e.response.data.error?e.response.data.error:e.data&&e.data.error?e.data.error:e.response&&e.response.error?e.response.error:e}r.r(t),r.d(t,{default:()=>n})},"./src/util/validators.js":
/*!********************************!*\
  !*** ./src/util/validators.js ***!
  \********************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{validateJWT:()=>s,validateHostNodes:()=>o,validateMetadata:()=>a,validatePinPolicyStructure:()=>i,validatePinataOptions:()=>c});r(/*! is-ipfs */"./node_modules/is-ipfs/src/index.js");function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e){if(!e||""===e)throw new Error("No pinataJWT provided! Please provide your pinata api key as an argument when you start this script")}function o(e){if(!Array.isArray(e))throw new Error("host_nodes value must be an array")}function a(e){if(e.name&&!("string"==typeof e.name||e.name instanceof String))throw new Error("metadata name must be of type string");if(e.keyvalues){if("object"!==n(e.keyvalues))throw new Error("metatadata keyvalues must be an object");var t=0;Object.entries(e.keyvalues).forEach((function(e){if(t>9)throw new Error("No more than 10 keyvalues can be provided for metadata entries");if("string"!=typeof e[1]&&"boolean"!=typeof e[1]&&isNaN(e[1]))throw new Error("Metadata keyvalue values must be strings, booleans, or numbers");t++}))}}function i(e){if(!e)throw new Error("No pin policy provided");if(!e.regions)throw new Error("No regions provided in pin policy");e.regions.length&&e.regions.forEach((function(e){if(!e.id||"[object String]"!==Object.prototype.toString.call(e.id))throw new Error("region id must be a string");if(!e.desiredReplicationCount&&0!==e.desiredReplicationCount||!Number.isInteger(e.desiredReplicationCount))throw new Error("desiredReplicationCount must be an integer")}))}function c(e){if("object"!==n(e))throw new Error("options must be an object");if(e.cidVersion&&0!=e.cidVersion&&1!=e.cidVersion)throw new Error("unsupported or invalid cidVersion");if(e.wrapWithDirectory&&!0!==e.wrapWithDirectory&&!1!==e.wrapWithDirectory)throw new Error("wrapWithDirectory must be a boolean value of true or false");e.customPinPolicy&&i(e.customPinPolicy)}},"./node_modules/err-code/index.js":
/*!****************************************!*\
  !*** ./node_modules/err-code/index.js ***!
  \****************************************/e=>{"use strict";function t(e,t){for(const r in t)Object.defineProperty(e,r,{value:t[r],enumerable:!0,configurable:!0});return e}e.exports=function(e,r,n){if(!e||"string"==typeof e)throw new TypeError("Please pass an Error to err-code");n||(n={}),"object"==typeof r&&(n=r,r=""),r&&(n.code=r);try{return t(e,n)}catch(r){n.message=e.message,n.stack=e.stack;const s=function(){};s.prototype=Object.create(Object.getPrototypeOf(e));return t(new s,n)}}},"./node_modules/ip-regex/index.js":
/*!****************************************!*\
  !*** ./node_modules/ip-regex/index.js ***!
  \****************************************/e=>{"use strict";const t="[a-fA-F\\d:]",r=e=>e&&e.includeBoundaries?`(?:(?<=\\s|^)(?=${t})|(?<=${t})(?=\\s|$))`:"",n="(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}",s="[a-fA-F\\d]{1,4}",o=`\n(?:\n(?:${s}:){7}(?:${s}|:)|                                    // 1:2:3:4:5:6:7::  1:2:3:4:5:6:7:8\n(?:${s}:){6}(?:${n}|:${s}|:)|                             // 1:2:3:4:5:6::    1:2:3:4:5:6::8   1:2:3:4:5:6::8  1:2:3:4:5:6::1.2.3.4\n(?:${s}:){5}(?::${n}|(?::${s}){1,2}|:)|                   // 1:2:3:4:5::      1:2:3:4:5::7:8   1:2:3:4:5::8    1:2:3:4:5::7:1.2.3.4\n(?:${s}:){4}(?:(?::${s}){0,1}:${n}|(?::${s}){1,3}|:)| // 1:2:3:4::        1:2:3:4::6:7:8   1:2:3:4::8      1:2:3:4::6:7:1.2.3.4\n(?:${s}:){3}(?:(?::${s}){0,2}:${n}|(?::${s}){1,4}|:)| // 1:2:3::          1:2:3::5:6:7:8   1:2:3::8        1:2:3::5:6:7:1.2.3.4\n(?:${s}:){2}(?:(?::${s}){0,3}:${n}|(?::${s}){1,5}|:)| // 1:2::            1:2::4:5:6:7:8   1:2::8          1:2::4:5:6:7:1.2.3.4\n(?:${s}:){1}(?:(?::${s}){0,4}:${n}|(?::${s}){1,6}|:)| // 1::              1::3:4:5:6:7:8   1::8            1::3:4:5:6:7:1.2.3.4\n(?::(?:(?::${s}){0,5}:${n}|(?::${s}){1,7}|:))             // ::2:3:4:5:6:7:8  ::2:3:4:5:6:7:8  ::8             ::1.2.3.4\n)(?:%[0-9a-zA-Z]{1,})?                                             // %eth0            %1\n`.replace(/\s*\/\/.*$/gm,"").replace(/\n/g,"").trim(),a=new RegExp(`(?:^${n}$)|(?:^${o}$)`),i=new RegExp(`^${n}$`),c=new RegExp(`^${o}$`),u=e=>e&&e.exact?a:new RegExp(`(?:${r(e)}${n}${r(e)})|(?:${r(e)}${o}${r(e)})`,"g");u.v4=e=>e&&e.exact?i:new RegExp(`${r(e)}${n}${r(e)}`,"g"),u.v6=e=>e&&e.exact?c:new RegExp(`${r(e)}${o}${r(e)}`,"g"),e.exports=u},"./node_modules/is-ip/index.js":
/*!*************************************!*\
  !*** ./node_modules/is-ip/index.js ***!
  \*************************************/(e,t,r)=>{"use strict";const n=r(/*! ip-regex */"./node_modules/ip-regex/index.js"),s=e=>n({exact:!0}).test(e);s.v4=e=>n.v4({exact:!0}).test(e),s.v6=e=>n.v6({exact:!0}).test(e),s.version=e=>s(e)?s.v4(e)?4:6:void 0,e.exports=s},"./node_modules/is-ipfs/src/index.js":
/*!*******************************************!*\
  !*** ./node_modules/is-ipfs/src/index.js ***!
  \*******************************************/(e,t,r)=>{"use strict";const{base58btc:n}=r(/*! multiformats/bases/base58 */"./node_modules/multiformats/esm/src/bases/base58.js"),{base32:s}=r(/*! multiformats/bases/base32 */"./node_modules/multiformats/esm/src/bases/base32.js"),o=r(/*! multiformats/hashes/digest */"./node_modules/multiformats/esm/src/hashes/digest.js"),{Multiaddr:a}=r(/*! multiaddr */"./node_modules/multiaddr/src/index.js"),i=r(/*! mafmt */"./node_modules/mafmt/src/index.js"),{CID:c}=r(/*! multiformats/cid */"./node_modules/multiformats/esm/src/cid.js"),{URL:u}=r(/*! iso-url */"./node_modules/iso-url/index.js"),d=r(/*! uint8arrays/to-string */"./node_modules/uint8arrays/to-string.js"),l=/^https?:\/\/[^/]+\/(ip[fn]s)\/([^/?#]+)/,p=/^\/(ip[fn]s)\/([^/?#]+)/,h=/^https?:\/\/([^/]+)\.(ip[fn]s)\.[^/?]+/,f=/^(([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])\.)+([a-z0-9]|[a-z0-9][a-z0-9-]*[a-z0-9])$/;function m(e){try{return"string"==typeof e?Boolean(c.parse(e)):e instanceof Uint8Array?Boolean(c.decode(e)):Boolean(c.asCID(e))}catch(e){return!1}}function b(e){if(!e)return!1;if(a.isMultiaddr(e))return!0;try{return new a(e),!0}catch(e){return!1}}function y(e,t,r=1,n=2){const s=g(e);if(!s)return!1;const o=s.match(t);if(!o)return!1;if("ipfs"!==o[r])return!1;let a=o[n];return a&&t===h&&(a=a.toLowerCase()),m(a)}function v(e,t,r=1,n=2){const s=g(e);if(!s)return!1;const o=s.match(t);if(!o)return!1;if("ipns"!==o[r])return!1;let a=o[n];if(a&&t===h){if(a=a.toLowerCase(),m(a))return!0;try{!a.includes(".")&&a.includes("-")&&(a=a.replace(/--/g,"@").replace(/-/g,".").replace(/@/g,"-"));const{hostname:e}=new u(`http://${a}`);return f.test(e)}catch(e){return!1}}return!0}function w(e){return"string"==typeof e}function g(e){return e instanceof Uint8Array?d(e,"base58btc"):!!w(e)&&e}const j=e=>y(e,h,2,1),_=e=>v(e,h,2,1),x=e=>j(e)||_(e),S=e=>y(e,l)||j(e),E=e=>v(e,l)||_(e),P=e=>S(e)||E(e)||x(e),k=e=>y(e,p)||v(e,p);e.exports={multihash:function(e){const t=g(e);try{o.decode(n.decode("z"+t))}catch{return!1}return!0},multiaddr:b,peerMultiaddr:function(e){return b(e)&&i.P2P.matches(e)},cid:m,base32cid:e=>function(e){try{s.decode(e)}catch{return!1}return!0}(e)&&m(e),ipfsSubdomain:j,ipnsSubdomain:_,subdomain:x,subdomainGatewayPattern:h,ipfsUrl:S,ipnsUrl:E,url:P,pathGatewayPattern:l,ipfsPath:e=>y(e,p),ipnsPath:e=>v(e,p),path:k,pathPattern:p,urlOrPath:e=>P(e)||k(e),cidPath:e=>w(e)&&!m(e)&&y(`/ipfs/${e}`,p)}},"./node_modules/iso-url/index.js":
/*!***************************************!*\
  !*** ./node_modules/iso-url/index.js ***!
  \***************************************/(e,t,r)=>{"use strict";const{URLWithLegacySupport:n,format:s,URLSearchParams:o,defaultBase:a}=r(/*! ./src/url */"./node_modules/iso-url/src/url-browser.js"),i=r(/*! ./src/relative */"./node_modules/iso-url/src/relative.js");e.exports={URL:n,URLSearchParams:o,format:s,relative:i,defaultBase:a}},"./node_modules/iso-url/src/relative.js":
/*!**********************************************!*\
  !*** ./node_modules/iso-url/src/relative.js ***!
  \**********************************************/(e,t,r)=>{"use strict";const{URLWithLegacySupport:n,format:s}=r(/*! ./url */"./node_modules/iso-url/src/url-browser.js");e.exports=(e,t={},r={},o)=>{let a,i=t.protocol?t.protocol.replace(":",""):"http";i=(r[i]||o||i)+":";try{a=new n(e)}catch(e){a={}}const c=Object.assign({},t,{protocol:i||a.protocol,host:t.host||a.host});return new n(e,s(c)).toString()}},"./node_modules/iso-url/src/url-browser.js":
/*!*************************************************!*\
  !*** ./node_modules/iso-url/src/url-browser.js ***!
  \*************************************************/e=>{"use strict";const t="undefined"!=typeof navigator&&"ReactNative"===navigator.product;const r=self.URL,n=t?"http://localhost":self.location.protocol+"//"+self.location.host;e.exports={URLWithLegacySupport:class{constructor(e="",t=n){this.super=new r(e,t),this.path=this.pathname+this.search,this.auth=this.username&&this.password?this.username+":"+this.password:null,this.query=this.search&&this.search.startsWith("?")?this.search.slice(1):null}get hash(){return this.super.hash}get host(){return this.super.host}get hostname(){return this.super.hostname}get href(){return this.super.href}get origin(){return this.super.origin}get password(){return this.super.password}get pathname(){return this.super.pathname}get port(){return this.super.port}get protocol(){return this.super.protocol}get search(){return this.super.search}get searchParams(){return this.super.searchParams}get username(){return this.super.username}set hash(e){this.super.hash=e}set host(e){this.super.host=e}set hostname(e){this.super.hostname=e}set href(e){this.super.href=e}set password(e){this.super.password=e}set pathname(e){this.super.pathname=e}set port(e){this.super.port=e}set protocol(e){this.super.protocol=e}set search(e){this.super.search=e}set username(e){this.super.username=e}static createObjectURL(e){return r.createObjectURL(e)}static revokeObjectURL(e){r.revokeObjectURL(e)}toJSON(){return this.super.toJSON()}toString(){return this.super.toString()}format(){return this.toString()}},URLSearchParams:self.URLSearchParams,defaultBase:n,format:function(e){if("string"==typeof e){return new r(e).toString()}if(!(e instanceof r)){const t=e.username&&e.password?`${e.username}:${e.password}@`:"",r=e.auth?e.auth+"@":"",n=e.port?":"+e.port:"",s=e.protocol?e.protocol+"//":"",o=e.host||"",a=e.hostname||"",i=e.search||(e.query?"?"+e.query:""),c=e.hash||"",u=e.pathname||"";return`${s}${t||r}${o||a+n}${e.path||u+i}${c}`}}}},"./node_modules/lodash.merge/index.js":
/*!********************************************!*\
  !*** ./node_modules/lodash.merge/index.js ***!
  \********************************************/(e,t,r)=>{e=r.nmd(e);var n="__lodash_hash_undefined__",s=9007199254740991,o="[object Arguments]",a="[object Function]",i="[object Object]",c=/^\[object .+?Constructor\]$/,u=/^(?:0|[1-9]\d*)$/,d={};d["[object Float32Array]"]=d["[object Float64Array]"]=d["[object Int8Array]"]=d["[object Int16Array]"]=d["[object Int32Array]"]=d["[object Uint8Array]"]=d["[object Uint8ClampedArray]"]=d["[object Uint16Array]"]=d["[object Uint32Array]"]=!0,d[o]=d["[object Array]"]=d["[object ArrayBuffer]"]=d["[object Boolean]"]=d["[object DataView]"]=d["[object Date]"]=d["[object Error]"]=d[a]=d["[object Map]"]=d["[object Number]"]=d[i]=d["[object RegExp]"]=d["[object Set]"]=d["[object String]"]=d["[object WeakMap]"]=!1;var l="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g,p="object"==typeof self&&self&&self.Object===Object&&self,h=l||p||Function("return this")(),f=t&&!t.nodeType&&t,m=f&&e&&!e.nodeType&&e,b=m&&m.exports===f,y=b&&l.process,v=function(){try{var e=m&&m.require&&m.require("util").types;return e||y&&y.binding&&y.binding("util")}catch(e){}}(),w=v&&v.isTypedArray;function g(e,t,r){switch(r.length){case 0:return e.call(t);case 1:return e.call(t,r[0]);case 2:return e.call(t,r[0],r[1]);case 3:return e.call(t,r[0],r[1],r[2])}return e.apply(t,r)}var j,_,x,S=Array.prototype,E=Function.prototype,P=Object.prototype,k=h["__core-js_shared__"],A=E.toString,O=P.hasOwnProperty,I=(j=/[^.]+$/.exec(k&&k.keys&&k.keys.IE_PROTO||""))?"Symbol(src)_1."+j:"",C=P.toString,M=A.call(Object),T=RegExp("^"+A.call(O).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),U=b?h.Buffer:void 0,$=h.Symbol,R=h.Uint8Array,D=U?U.allocUnsafe:void 0,z=(_=Object.getPrototypeOf,x=Object,function(e){return _(x(e))}),L=Object.create,N=P.propertyIsEnumerable,B=S.splice,V=$?$.toStringTag:void 0,F=function(){try{var e=fe(Object,"defineProperty");return e({},"",{}),e}catch(e){}}(),J=U?U.isBuffer:void 0,q=Math.max,H=Date.now,W=fe(h,"Map"),G=fe(Object,"create"),X=function(){function e(){}return function(t){if(!Pe(t))return{};if(L)return L(t);e.prototype=t;var r=new e;return e.prototype=void 0,r}}();function Q(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function K(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function Z(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function Y(e){var t=this.__data__=new K(e);this.size=t.size}function ee(e,t){var r=je(e),n=!r&&ge(e),s=!r&&!n&&xe(e),o=!r&&!n&&!s&&Ae(e),a=r||n||s||o,i=a?function(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n}(e.length,String):[],c=i.length;for(var u in e)!t&&!O.call(e,u)||a&&("length"==u||s&&("offset"==u||"parent"==u)||o&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||me(u,c))||i.push(u);return i}function te(e,t,r){(void 0!==r&&!we(e[t],r)||void 0===r&&!(t in e))&&se(e,t,r)}function re(e,t,r){var n=e[t];O.call(e,t)&&we(n,r)&&(void 0!==r||t in e)||se(e,t,r)}function ne(e,t){for(var r=e.length;r--;)if(we(e[r][0],t))return r;return-1}function se(e,t,r){"__proto__"==t&&F?F(e,t,{configurable:!0,enumerable:!0,value:r,writable:!0}):e[t]=r}Q.prototype.clear=function(){this.__data__=G?G(null):{},this.size=0},Q.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},Q.prototype.get=function(e){var t=this.__data__;if(G){var r=t[e];return r===n?void 0:r}return O.call(t,e)?t[e]:void 0},Q.prototype.has=function(e){var t=this.__data__;return G?void 0!==t[e]:O.call(t,e)},Q.prototype.set=function(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=G&&void 0===t?n:t,this},K.prototype.clear=function(){this.__data__=[],this.size=0},K.prototype.delete=function(e){var t=this.__data__,r=ne(t,e);return!(r<0)&&(r==t.length-1?t.pop():B.call(t,r,1),--this.size,!0)},K.prototype.get=function(e){var t=this.__data__,r=ne(t,e);return r<0?void 0:t[r][1]},K.prototype.has=function(e){return ne(this.__data__,e)>-1},K.prototype.set=function(e,t){var r=this.__data__,n=ne(r,e);return n<0?(++this.size,r.push([e,t])):r[n][1]=t,this},Z.prototype.clear=function(){this.size=0,this.__data__={hash:new Q,map:new(W||K),string:new Q}},Z.prototype.delete=function(e){var t=he(this,e).delete(e);return this.size-=t?1:0,t},Z.prototype.get=function(e){return he(this,e).get(e)},Z.prototype.has=function(e){return he(this,e).has(e)},Z.prototype.set=function(e,t){var r=he(this,e),n=r.size;return r.set(e,t),this.size+=r.size==n?0:1,this},Y.prototype.clear=function(){this.__data__=new K,this.size=0},Y.prototype.delete=function(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r},Y.prototype.get=function(e){return this.__data__.get(e)},Y.prototype.has=function(e){return this.__data__.has(e)},Y.prototype.set=function(e,t){var r=this.__data__;if(r instanceof K){var n=r.__data__;if(!W||n.length<199)return n.push([e,t]),this.size=++r.size,this;r=this.__data__=new Z(n)}return r.set(e,t),this.size=r.size,this};var oe,ae=function(e,t,r){for(var n=-1,s=Object(e),o=r(e),a=o.length;a--;){var i=o[oe?a:++n];if(!1===t(s[i],i,s))break}return e};function ie(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":V&&V in Object(e)?function(e){var t=O.call(e,V),r=e[V];try{e[V]=void 0;var n=!0}catch(e){}var s=C.call(e);n&&(t?e[V]=r:delete e[V]);return s}(e):function(e){return C.call(e)}(e)}function ce(e){return ke(e)&&ie(e)==o}function ue(e){return!(!Pe(e)||function(e){return!!I&&I in e}(e))&&(Se(e)?T:c).test(function(e){if(null!=e){try{return A.call(e)}catch(e){}try{return e+""}catch(e){}}return""}(e))}function de(e){if(!Pe(e))return function(e){var t=[];if(null!=e)for(var r in Object(e))t.push(r);return t}(e);var t=be(e),r=[];for(var n in e)("constructor"!=n||!t&&O.call(e,n))&&r.push(n);return r}function le(e,t,r,n,s){e!==t&&ae(t,(function(o,a){if(s||(s=new Y),Pe(o))!function(e,t,r,n,s,o,a){var c=ye(e,r),u=ye(t,r),d=a.get(u);if(d)return void te(e,r,d);var l=o?o(c,u,r+"",e,t,a):void 0,p=void 0===l;if(p){var h=je(u),f=!h&&xe(u),m=!h&&!f&&Ae(u);l=u,h||f||m?je(c)?l=c:ke(g=c)&&_e(g)?l=function(e,t){var r=-1,n=e.length;t||(t=Array(n));for(;++r<n;)t[r]=e[r];return t}(c):f?(p=!1,l=function(e,t){if(t)return e.slice();var r=e.length,n=D?D(r):new e.constructor(r);return e.copy(n),n}(u,!0)):m?(p=!1,b=u,y=!0?(v=b.buffer,w=new v.constructor(v.byteLength),new R(w).set(new R(v)),w):b.buffer,l=new b.constructor(y,b.byteOffset,b.length)):l=[]:function(e){if(!ke(e)||ie(e)!=i)return!1;var t=z(e);if(null===t)return!0;var r=O.call(t,"constructor")&&t.constructor;return"function"==typeof r&&r instanceof r&&A.call(r)==M}(u)||ge(u)?(l=c,ge(c)?l=function(e){return function(e,t,r,n){var s=!r;r||(r={});var o=-1,a=t.length;for(;++o<a;){var i=t[o],c=n?n(r[i],e[i],i,r,e):void 0;void 0===c&&(c=e[i]),s?se(r,i,c):re(r,i,c)}return r}(e,Oe(e))}(c):Pe(c)&&!Se(c)||(l=function(e){return"function"!=typeof e.constructor||be(e)?{}:X(z(e))}(u))):p=!1}var b,y,v,w;var g;p&&(a.set(u,l),s(l,u,n,o,a),a.delete(u));te(e,r,l)}(e,t,a,r,le,n,s);else{var c=n?n(ye(e,a),o,a+"",e,t,s):void 0;void 0===c&&(c=o),te(e,a,c)}}),Oe)}function pe(e,t){return ve(function(e,t,r){return t=q(void 0===t?e.length-1:t,0),function(){for(var n=arguments,s=-1,o=q(n.length-t,0),a=Array(o);++s<o;)a[s]=n[t+s];s=-1;for(var i=Array(t+1);++s<t;)i[s]=n[s];return i[t]=r(a),g(e,this,i)}}(e,t,Me),e+"")}function he(e,t){var r,n,s=e.__data__;return("string"==(n=typeof(r=t))||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==r:null===r)?s["string"==typeof t?"string":"hash"]:s.map}function fe(e,t){var r=function(e,t){return null==e?void 0:e[t]}(e,t);return ue(r)?r:void 0}function me(e,t){var r=typeof e;return!!(t=null==t?s:t)&&("number"==r||"symbol"!=r&&u.test(e))&&e>-1&&e%1==0&&e<t}function be(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||P)}function ye(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]}var ve=function(e){var t=0,r=0;return function(){var n=H(),s=16-(n-r);if(r=n,s>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}(F?function(e,t){return F(e,"toString",{configurable:!0,enumerable:!1,value:(r=t,function(){return r}),writable:!0});var r}:Me);function we(e,t){return e===t||e!=e&&t!=t}var ge=ce(function(){return arguments}())?ce:function(e){return ke(e)&&O.call(e,"callee")&&!N.call(e,"callee")},je=Array.isArray;function _e(e){return null!=e&&Ee(e.length)&&!Se(e)}var xe=J||function(){return!1};function Se(e){if(!Pe(e))return!1;var t=ie(e);return t==a||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t}function Ee(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=s}function Pe(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}function ke(e){return null!=e&&"object"==typeof e}var Ae=w?function(e){return function(t){return e(t)}}(w):function(e){return ke(e)&&Ee(e.length)&&!!d[ie(e)]};function Oe(e){return _e(e)?ee(e,!0):de(e)}var Ie,Ce=(Ie=function(e,t,r){le(e,t,r)},pe((function(e,t){var r=-1,n=t.length,s=n>1?t[n-1]:void 0,o=n>2?t[2]:void 0;for(s=Ie.length>3&&"function"==typeof s?(n--,s):void 0,o&&function(e,t,r){if(!Pe(r))return!1;var n=typeof t;return!!("number"==n?_e(r)&&me(t,r.length):"string"==n&&t in r)&&we(r[t],e)}(t[0],t[1],o)&&(s=n<3?void 0:s,n=1),e=Object(e);++r<n;){var a=t[r];a&&Ie(e,a,r,s)}return e})));function Me(e){return e}e.exports=Ce},"./node_modules/mafmt/src/index.js":
/*!*****************************************!*\
  !*** ./node_modules/mafmt/src/index.js ***!
  \*****************************************/(e,t,r)=>{"use strict";const{Multiaddr:n}=r(/*! multiaddr */"./node_modules/multiaddr/src/index.js"),s=I("dns4"),o=I("dns6"),a=I("dnsaddr"),i=O(I("dns"),a,s,o),c=O(I("ip4"),I("ip6")),u=O(A(c,I("tcp")),A(i,I("tcp"))),d=A(c,I("udp")),l=A(d,I("utp")),p=A(d,I("quic")),h=O(A(u,I("ws")),A(i,I("ws"))),f=O(A(u,I("wss")),A(i,I("wss"))),m=O(A(u,I("http")),A(c,I("http")),A(i,I("http"))),b=O(A(u,I("https")),A(c,I("https")),A(i,I("https"))),y=O(A(h,I("p2p-webrtc-star"),I("p2p")),A(f,I("p2p-webrtc-star"),I("p2p")),A(h,I("p2p-webrtc-star")),A(f,I("p2p-webrtc-star"))),v=O(A(h,I("p2p-websocket-star"),I("p2p")),A(f,I("p2p-websocket-star"),I("p2p")),A(h,I("p2p-websocket-star")),A(f,I("p2p-websocket-star"))),w=O(A(m,I("p2p-webrtc-direct"),I("p2p")),A(b,I("p2p-webrtc-direct"),I("p2p")),A(m,I("p2p-webrtc-direct")),A(b,I("p2p-webrtc-direct"))),g=O(h,f,m,b,y,w,u,l,p,i),j=O(A(g,I("p2p-stardust"),I("p2p")),A(g,I("p2p-stardust"))),_=O(A(g,I("p2p")),y,w,I("p2p")),x=O(A(_,I("p2p-circuit"),_),A(_,I("p2p-circuit")),A(I("p2p-circuit"),_),A(g,I("p2p-circuit")),A(I("p2p-circuit"),g),I("p2p-circuit")),S=()=>O(A(x,S),x),E=S(),P=O(A(E,_,E),A(_,E),A(E,_),E,_);function k(e){return function(t){if(!n.isMultiaddr(t))try{t=new n(t)}catch(e){return!1}const r=e(t.protoNames());return null!==r&&(!0===r||!1===r?r:0===r.length)}}function A(...e){function t(t){if(t.length<e.length)return null;let r=t;return e.some((e=>(r="function"==typeof e?e().partialMatch(t):e.partialMatch(t),Array.isArray(r)&&(t=r),null===r))),r}return{toString:function(){return"{ "+e.join(" ")+" }"},input:e,matches:k(t),partialMatch:t}}function O(...e){function t(t){let r=null;return e.some((e=>{const n="function"==typeof e?e().partialMatch(t):e.partialMatch(t);return!!n&&(r=n,!0)})),r}return{toString:function(){return"{ "+e.join(" ")+" }"},input:e,matches:k(t),partialMatch:t}}function I(e){const t=e;return{toString:function(){return t},matches:function(e){let r;if("string"==typeof e||e instanceof Uint8Array)try{r=new n(e)}catch(e){return!1}else r=e;const s=r.protoNames();return 1===s.length&&s[0]===t},partialMatch:function(e){return 0===e.length?null:e[0]===t?e.slice(1):null}}}e.exports={DNS:i,DNS4:s,DNS6:o,DNSADDR:a,IP:c,TCP:u,UDP:d,QUIC:p,UTP:l,HTTP:m,HTTPS:b,WebSockets:h,WebSocketsSecure:f,WebSocketStar:v,WebRTCStar:y,WebRTCDirect:w,Reliable:g,Stardust:j,Circuit:E,P2P:P,IPFS:P}},"./node_modules/multiaddr/src/codec.js":
/*!*********************************************!*\
  !*** ./node_modules/multiaddr/src/codec.js ***!
  \*********************************************/(e,t,r)=>{"use strict";const n=r(/*! ./convert */"./node_modules/multiaddr/src/convert.js"),s=r(/*! ./protocols-table */"./node_modules/multiaddr/src/protocols-table.js"),o=r(/*! varint */"./node_modules/varint/index.js"),a=r(/*! uint8arrays/concat */"./node_modules/uint8arrays/concat.js"),i=r(/*! uint8arrays/to-string */"./node_modules/uint8arrays/to-string.js");function c(e){const t=[],r=e.split("/").slice(1);if(1===r.length&&""===r[0])return[];for(let n=0;n<r.length;n++){const o=r[n],a=s(o);if(0!==a.size){if(n++,n>=r.length)throw w("invalid address: "+e);if(a.path){t.push([o,v(r.slice(n).join("/"))]);break}t.push([o,r[n]])}else t.push([o])}return t}function u(e){const t=[];return e.map((e=>{const r=g(e);return t.push(r.name),e.length>1&&t.push(e[1]),null})),v(t.join("/"))}function d(e){return e.map((e=>{Array.isArray(e)||(e=[e]);const t=g(e);return e.length>1?[t.code,n.toBytes(t.code,e[1])]:[t.code]}))}function l(e){return e.map((e=>{const t=g(e);return e[1]?[t.code,n.toString(t.code,e[1])]:[t.code]}))}function p(e){return b(a(e.map((e=>{const t=g(e);let r=Uint8Array.from(o.encode(t.code));return e.length>1&&(r=a([r,e[1]])),r}))))}function h(e,t){if(e.size>0)return e.size/8;if(0===e.size)return 0;return o.decode(t)+o.decode.bytes}function f(e){const t=[];let r=0;for(;r<e.length;){const n=o.decode(e,r),a=o.decode.bytes,c=h(s(n),e.slice(r+a));if(0===c){t.push([n]),r+=a;continue}const u=e.slice(r+a,r+a+c);if(r+=c+a,r>e.length)throw w("Invalid address Uint8Array: "+i(e,"base16"));t.push([n,u])}return t}function m(e){return p(d(c(e=v(e))))}function b(e){const t=y(e);if(t)throw t;return Uint8Array.from(e)}function y(e){try{f(e)}catch(e){return e}}function v(e){return"/"+e.trim().split("/").filter((e=>e)).join("/")}function w(e){return new Error("Error parsing address: "+e)}function g(e){return s(e[0])}e.exports={stringToStringTuples:c,stringTuplesToString:u,tuplesToStringTuples:l,stringTuplesToTuples:d,bytesToTuples:f,tuplesToBytes:p,bytesToString:function(e){const t=f(e);return u(l(t))},stringToBytes:m,fromString:function(e){return m(e)},fromBytes:b,validateBytes:y,isValidBytes:function(e){return void 0===y(e)},cleanPath:v,ParseError:w,protoFromTuple:g,sizeForAddr:h}},"./node_modules/multiaddr/src/convert.js":
/*!***********************************************!*\
  !*** ./node_modules/multiaddr/src/convert.js ***!
  \***********************************************/(e,t,r)=>{"use strict";const n=r(/*! ./ip */"./node_modules/multiaddr/src/ip.js"),s=r(/*! ./protocols-table */"./node_modules/multiaddr/src/protocols-table.js"),{CID:o}=r(/*! multiformats/cid */"./node_modules/multiformats/esm/src/cid.js"),{base32:a}=r(/*! multiformats/bases/base32 */"./node_modules/multiformats/esm/src/bases/base32.js"),{base58btc:i}=r(/*! multiformats/bases/base58 */"./node_modules/multiformats/esm/src/bases/base58.js"),c=r(/*! multiformats/hashes/digest */"./node_modules/multiformats/esm/src/hashes/digest.js"),u=r(/*! varint */"./node_modules/varint/index.js"),d=r(/*! uint8arrays/to-string */"./node_modules/uint8arrays/to-string.js"),l=r(/*! uint8arrays/from-string */"./node_modules/uint8arrays/from-string.js"),p=r(/*! uint8arrays/concat */"./node_modules/uint8arrays/concat.js");function h(e,t){return t instanceof Uint8Array?h.toString(e,t):h.toBytes(e,t)}function f(e){if(!n.isIP(e))throw new Error("invalid ip address");return n.toBytes(e)}function m(e){const t=new ArrayBuffer(2);return new DataView(t).setUint16(0,e),new Uint8Array(t)}function b(e){return new DataView(e.buffer).getUint16(e.byteOffset)}function y(e){const t=e.slice(0,e.length-2),r=e.slice(e.length-2);return d(t,"base32")+":"+b(r)}e.exports=h,h.toString=function(e,t){switch(s(e).code){case 4:case 41:return function(e){const t=n.toString(e);if(!t||!n.isIP(t))throw new Error("invalid ip address");return t}(t);case 6:case 273:case 33:case 132:return b(t).toString();case 53:case 54:case 55:case 56:case 400:case 777:return function(e){const t=u.decode(e);if((e=e.slice(u.decode.bytes)).length!==t)throw new Error("inconsistent lengths");return d(e)}(t);case 421:return function(e){const t=u.decode(e),r=e.slice(u.decode.bytes);if(r.length!==t)throw new Error("inconsistent lengths");return d(r,"base58btc")}(t);case 444:case 445:return y(t);default:return d(t,"base16")}},h.toBytes=function(e,t){switch(s(e).code){case 4:case 41:return f(t);case 6:case 273:case 33:case 132:return m(parseInt(t,10));case 53:case 54:case 55:case 56:case 400:case 777:return function(e){const t=l(e),r=Uint8Array.from(u.encode(t.length));return p([r,t],r.length+t.length)}(t);case 421:return function(e){let t;t="Q"===e[0]||"1"===e[0]?c.decode(i.decode(`z${e}`)).bytes:o.parse(e).multihash.bytes;const r=Uint8Array.from(u.encode(t.length));return p([r,t],r.length+t.length)}(t);case 444:return function(e){const t=e.split(":");if(2!==t.length)throw new Error("failed to parse onion addr: "+t+" does not contain a port number");if(16!==t[0].length)throw new Error("failed to parse onion addr: "+t[0]+" not a Tor onion address.");const r=a.decode("b"+t[0]),n=parseInt(t[1],10);if(n<1||n>65536)throw new Error("Port number is not in range(1, 65536)");const s=m(n);return p([r,s],r.length+s.length)}(t);case 445:return function(e){const t=e.split(":");if(2!==t.length)throw new Error("failed to parse onion addr: "+t+" does not contain a port number");if(56!==t[0].length)throw new Error("failed to parse onion addr: "+t[0]+" not a Tor onion3 address.");const r=a.decode("b"+t[0]),n=parseInt(t[1],10);if(n<1||n>65536)throw new Error("Port number is not in range(1, 65536)");const s=m(n);return p([r,s],r.length+s.length)}(t);default:return l(t,"base16")}}},"./node_modules/multiaddr/src/index.js":
/*!*********************************************!*\
  !*** ./node_modules/multiaddr/src/index.js ***!
  \*********************************************/(e,t,r)=>{"use strict";const n=r(/*! ./codec */"./node_modules/multiaddr/src/codec.js"),s=r(/*! ./protocols-table */"./node_modules/multiaddr/src/protocols-table.js"),o=r(/*! varint */"./node_modules/varint/index.js"),{CID:a}=r(/*! multiformats/cid */"./node_modules/multiformats/esm/src/cid.js"),{base58btc:i}=r(/*! multiformats/bases/base58 */"./node_modules/multiformats/esm/src/bases/base58.js"),c=r(/*! err-code */"./node_modules/err-code/index.js"),u=Symbol.for("nodejs.util.inspect.custom"),d=r(/*! uint8arrays/to-string */"./node_modules/uint8arrays/to-string.js"),l=r(/*! uint8arrays/equals */"./node_modules/uint8arrays/equals.js"),p=new Map,h=Symbol.for("@multiformats/js-multiaddr/multiaddr");class f{constructor(e){if(null==e&&(e=""),Object.defineProperty(this,h,{value:!0}),e instanceof Uint8Array)this.bytes=n.fromBytes(e);else if("string"==typeof e){if(e.length>0&&"/"!==e.charAt(0))throw new Error(`multiaddr "${e}" must start with a "/"`);this.bytes=n.fromString(e)}else{if(!f.isMultiaddr(e))throw new Error("addr must be a string, Buffer, or another Multiaddr");this.bytes=n.fromBytes(e.bytes)}}toString(){return n.bytesToString(this.bytes)}toJSON(){return this.toString()}toOptions(){const e={},t=this.toString().split("/");return e.family="ip4"===t[1]?4:6,e.host=t[2],e.transport=t[3],e.port=parseInt(t[4]),e}protos(){return this.protoCodes().map((e=>Object.assign({},s(e))))}protoCodes(){const e=[],t=this.bytes;let r=0;for(;r<t.length;){const a=o.decode(t,r),i=o.decode.bytes,c=s(a);r+=n.sizeForAddr(c,t.slice(r+i))+i,e.push(a)}return e}protoNames(){return this.protos().map((e=>e.name))}tuples(){return n.bytesToTuples(this.bytes)}stringTuples(){const e=n.bytesToTuples(this.bytes);return n.tuplesToStringTuples(e)}encapsulate(e){return e=new f(e),new f(this.toString()+e.toString())}decapsulate(e){const t=e.toString(),r=this.toString(),n=r.lastIndexOf(t);if(n<0)throw new Error("Address "+this+" does not contain subaddress: "+e);return new f(r.slice(0,n))}decapsulateCode(e){const t=this.tuples();for(let r=t.length-1;r>=0;r--)if(t[r][0]===e)return new f(n.tuplesToBytes(t.slice(0,r)));return this}getPeerId(){try{const e=this.stringTuples().filter((e=>e[0]===s.names.ipfs.code)).pop();if(e&&e[1]){const t=e[1];return"Q"===t[0]||"1"===t[0]?d(i.decode(`z${t}`),"base58btc"):d(a.parse(t).multihash.bytes,"base58btc")}return null}catch(e){return null}}getPath(){let e=null;try{e=this.stringTuples().filter((e=>!!s(e[0]).path))[0][1],e||(e=null)}catch(t){e=null}return e}equals(e){return l(this.bytes,e.bytes)}async resolve(){const e=this.protos().find((e=>e.resolvable));if(!e)return[this];const t=p.get(e.name);if(!t)throw c(new Error(`no available resolver for ${e.name}`),"ERR_NO_AVAILABLE_RESOLVER");return(await t(this)).map((e=>new f(e)))}nodeAddress(){const e=this.protoCodes(),t=this.protoNames(),r=this.toString().split("/").slice(1);if(r.length<4)throw new Error('multiaddr must have a valid format: "/{ip4, ip6, dns4, dns6}/{address}/{tcp, udp}/{port}".');if(4!==e[0]&&41!==e[0]&&54!==e[0]&&55!==e[0])throw new Error(`no protocol with name: "'${t[0]}'". Must have a valid family name: "{ip4, ip6, dns4, dns6}".`);if("tcp"!==r[2]&&"udp"!==r[2])throw new Error(`no protocol with name: "'${t[1]}'". Must have a valid transport protocol: "{tcp, udp}".`);return{family:41===e[0]||55===e[0]?6:4,address:r[1],port:parseInt(r[3])}}isThinWaistAddress(e){const t=(e||this).protos();return 2===t.length&&((4===t[0].code||41===t[0].code)&&(6===t[1].code||273===t[1].code))}static fromNodeAddress(e,t){if(!e)throw new Error("requires node address object");if(!t)throw new Error("requires transport protocol");let r;switch(e.family){case 4:r="ip4";break;case 6:r="ip6";break;default:throw Error(`Invalid addr family. Got '${e.family}' instead of 4 or 6`)}return new f("/"+[r,e.address,t,e.port].join("/"))}static isName(e){return!!f.isMultiaddr(e)&&e.protos().some((e=>e.resolvable))}static isMultiaddr(e){return e instanceof f||Boolean(e&&e[h])}[u](){return"<Multiaddr "+d(this.bytes,"base16")+" - "+n.bytesToString(this.bytes)+">"}inspect(){return"<Multiaddr "+d(this.bytes,"base16")+" - "+n.bytesToString(this.bytes)+">"}}f.protocols=s,f.resolvers=p,e.exports={Multiaddr:f,multiaddr:function(e){return new f(e)},protocols:s,resolvers:p}},"./node_modules/multiaddr/src/ip.js":
/*!******************************************!*\
  !*** ./node_modules/multiaddr/src/ip.js ***!
  \******************************************/(e,t,r)=>{"use strict";const n=r(/*! is-ip */"./node_modules/is-ip/index.js"),s=r(/*! uint8arrays/to-string */"./node_modules/uint8arrays/to-string.js"),o=n,a=n.v4,i=n.v6,c=function(e,t,r){let n;if(r=~~r,a(e))n=t||new Uint8Array(r+4),e.split(/\./g).map((function(e){n[r++]=255&parseInt(e,10)}));else if(i(e)){const o=e.split(":",8);let i;for(i=0;i<o.length;i++){let e;a(o[i])&&(e=c(o[i]),o[i]=s(e.slice(0,2),"base16")),e&&++i<8&&o.splice(i,0,s(e.slice(2,4),"base16"))}if(""===o[0])for(;o.length<8;)o.unshift("0");else if(""===o[o.length-1])for(;o.length<8;)o.push("0");else if(o.length<8){for(i=0;i<o.length&&""!==o[i];i++);const e=[i,"1"];for(i=9-o.length;i>0;i--)e.push("0");o.splice.apply(o,e)}for(n=t||new Uint8Array(r+16),i=0;i<o.length;i++){const e=parseInt(o[i],16);n[r++]=e>>8&255,n[r++]=255&e}}if(!n)throw Error("Invalid ip address: "+e);return n};e.exports={isIP:o,isV4:a,isV6:i,toBytes:c,toString:function(e,t,r){t=~~t,r=r||e.length-t;const n=[];let s;const o=new DataView(e.buffer);if(4===r){for(let s=0;s<r;s++)n.push(e[t+s]);s=n.join(".")}else if(16===r){for(let e=0;e<r;e+=2)n.push(o.getUint16(t+e).toString(16));s=n.join(":"),s=s.replace(/(^|:)0(:0)*:0(:|$)/,"$1::$3"),s=s.replace(/:{3,4}/,"::")}return s}}},"./node_modules/multiaddr/src/protocols-table.js":
/*!*******************************************************!*\
  !*** ./node_modules/multiaddr/src/protocols-table.js ***!
  \*******************************************************/e=>{"use strict";function t(e){if("number"==typeof e){if(t.codes[e])return t.codes[e];throw new Error("no protocol with code: "+e)}if("string"==typeof e){if(t.names[e])return t.names[e];throw new Error("no protocol with name: "+e)}throw new Error("invalid protocol id type: "+e)}const r=-1;function n(e,t,r,n,s){return{code:e,size:t,name:r,resolvable:Boolean(n),path:Boolean(s)}}t.lengthPrefixedVarSize=r,t.V=r,t.table=[[4,32,"ip4"],[6,16,"tcp"],[33,16,"dccp"],[41,128,"ip6"],[42,r,"ip6zone"],[53,r,"dns","resolvable"],[54,r,"dns4","resolvable"],[55,r,"dns6","resolvable"],[56,r,"dnsaddr","resolvable"],[132,16,"sctp"],[273,16,"udp"],[275,0,"p2p-webrtc-star"],[276,0,"p2p-webrtc-direct"],[277,0,"p2p-stardust"],[290,0,"p2p-circuit"],[301,0,"udt"],[302,0,"utp"],[400,r,"unix",!1,"path"],[421,r,"ipfs"],[421,r,"p2p"],[443,0,"https"],[444,96,"onion"],[445,296,"onion3"],[446,r,"garlic64"],[460,0,"quic"],[477,0,"ws"],[478,0,"wss"],[479,0,"p2p-websocket-star"],[480,0,"http"],[777,r,"memory"]],t.names={},t.codes={},t.table.map((e=>{const r=n.apply(null,e);return t.codes[r.code]=r,t.names[r.name]=r,null})),t.object=n,e.exports=t},"./node_modules/multiformats/esm/src/bases/base.js":
/*!*********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base.js ***!
  \*********************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{Codec:()=>c,from:()=>u,baseX:()=>d,rfc4648:()=>l});var n=r(/*! ../../vendor/base-x.js */"./node_modules/multiformats/esm/vendor/base-x.js"),s=r(/*! ../bytes.js */"./node_modules/multiformats/esm/src/bytes.js");class o{constructor(e,t,r){this.name=e,this.prefix=t,this.baseEncode=r}encode(e){if(e instanceof Uint8Array)return`${this.prefix}${this.baseEncode(e)}`;throw Error("Unknown type, must be binary type")}}class a{constructor(e,t,r){this.name=e,this.prefix=t,this.baseDecode=r}decode(e){if("string"!=typeof e)throw Error("Can only multibase decode strings");switch(e[0]){case this.prefix:return this.baseDecode(e.slice(1));default:throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`)}}or(e){const t={[this.prefix]:this,...e.decoders||{[e.prefix]:e}};return new i(t)}}class i{constructor(e){this.decoders=e}or(e){const t=e.decoders||{[e.prefix]:e};return new i({...this.decoders,...t})}decode(e){const t=e[0],r=this.decoders[t];if(r)return r.decode(e);throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)}}class c{constructor(e,t,r,n){this.name=e,this.prefix=t,this.baseEncode=r,this.baseDecode=n,this.encoder=new o(e,t,r),this.decoder=new a(e,t,n)}encode(e){return this.encoder.encode(e)}decode(e){return this.decoder.decode(e)}}const u=({name:e,prefix:t,encode:r,decode:n})=>new c(e,t,r,n),d=({prefix:e,name:t,alphabet:r})=>{const{encode:o,decode:a}=(0,n.default)(r,t);return u({prefix:e,name:t,encode:o,decode:e=>(0,s.coerce)(a(e))})},l=({name:e,prefix:t,bitsPerChar:r,alphabet:n})=>u({prefix:t,name:e,encode:e=>((e,t,r)=>{const n="="===t[t.length-1],s=(1<<r)-1;let o="",a=0,i=0;for(let n=0;n<e.length;++n)for(i=i<<8|e[n],a+=8;a>r;)a-=r,o+=t[s&i>>a];if(a&&(o+=t[s&i<<r-a]),n)for(;o.length*r&7;)o+="=";return o})(e,n,r),decode:t=>((e,t,r,n)=>{const s={};for(let e=0;e<t.length;++e)s[t[e]]=e;let o=e.length;for(;"="===e[o-1];)--o;const a=new Uint8Array(o*r/8|0);let i=0,c=0,u=0;for(let t=0;t<o;++t){const o=s[e[t]];if(void 0===o)throw new SyntaxError(`Non-${n} character`);c=c<<r|o,i+=r,i>=8&&(i-=8,a[u++]=255&c>>i)}if(i>=r||255&c<<8-i)throw new SyntaxError("Unexpected end of data");return a})(t,n,r,e)})},"./node_modules/multiformats/esm/src/bases/base10.js":
/*!***********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base10.js ***!
  \***********************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{base10:()=>n});const n=(0,r(/*! ./base.js */"./node_modules/multiformats/esm/src/bases/base.js").baseX)({prefix:"9",name:"base10",alphabet:"0123456789"})},"./node_modules/multiformats/esm/src/bases/base16.js":
/*!***********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base16.js ***!
  \***********************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{base16:()=>s,base16upper:()=>o});var n=r(/*! ./base.js */"./node_modules/multiformats/esm/src/bases/base.js");const s=(0,n.rfc4648)({prefix:"f",name:"base16",alphabet:"0123456789abcdef",bitsPerChar:4}),o=(0,n.rfc4648)({prefix:"F",name:"base16upper",alphabet:"0123456789ABCDEF",bitsPerChar:4})},"./node_modules/multiformats/esm/src/bases/base2.js":
/*!**********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base2.js ***!
  \**********************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{base2:()=>n});const n=(0,r(/*! ./base.js */"./node_modules/multiformats/esm/src/bases/base.js").rfc4648)({prefix:"0",name:"base2",alphabet:"01",bitsPerChar:1})},"./node_modules/multiformats/esm/src/bases/base32.js":
/*!***********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base32.js ***!
  \***********************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{base32:()=>s,base32upper:()=>o,base32pad:()=>a,base32padupper:()=>i,base32hex:()=>c,base32hexupper:()=>u,base32hexpad:()=>d,base32hexpadupper:()=>l,base32z:()=>p});var n=r(/*! ./base.js */"./node_modules/multiformats/esm/src/bases/base.js");const s=(0,n.rfc4648)({prefix:"b",name:"base32",alphabet:"abcdefghijklmnopqrstuvwxyz234567",bitsPerChar:5}),o=(0,n.rfc4648)({prefix:"B",name:"base32upper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",bitsPerChar:5}),a=(0,n.rfc4648)({prefix:"c",name:"base32pad",alphabet:"abcdefghijklmnopqrstuvwxyz234567=",bitsPerChar:5}),i=(0,n.rfc4648)({prefix:"C",name:"base32padupper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",bitsPerChar:5}),c=(0,n.rfc4648)({prefix:"v",name:"base32hex",alphabet:"0123456789abcdefghijklmnopqrstuv",bitsPerChar:5}),u=(0,n.rfc4648)({prefix:"V",name:"base32hexupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV",bitsPerChar:5}),d=(0,n.rfc4648)({prefix:"t",name:"base32hexpad",alphabet:"0123456789abcdefghijklmnopqrstuv=",bitsPerChar:5}),l=(0,n.rfc4648)({prefix:"T",name:"base32hexpadupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV=",bitsPerChar:5}),p=(0,n.rfc4648)({prefix:"h",name:"base32z",alphabet:"ybndrfg8ejkmcpqxot1uwisza345h769",bitsPerChar:5})},"./node_modules/multiformats/esm/src/bases/base36.js":
/*!***********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base36.js ***!
  \***********************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{base36:()=>s,base36upper:()=>o});var n=r(/*! ./base.js */"./node_modules/multiformats/esm/src/bases/base.js");const s=(0,n.baseX)({prefix:"k",name:"base36",alphabet:"0123456789abcdefghijklmnopqrstuvwxyz"}),o=(0,n.baseX)({prefix:"K",name:"base36upper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"})},"./node_modules/multiformats/esm/src/bases/base58.js":
/*!***********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base58.js ***!
  \***********************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{base58btc:()=>s,base58flickr:()=>o});var n=r(/*! ./base.js */"./node_modules/multiformats/esm/src/bases/base.js");const s=(0,n.baseX)({name:"base58btc",prefix:"z",alphabet:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"}),o=(0,n.baseX)({name:"base58flickr",prefix:"Z",alphabet:"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"})},"./node_modules/multiformats/esm/src/bases/base64.js":
/*!***********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base64.js ***!
  \***********************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{base64:()=>s,base64pad:()=>o,base64url:()=>a,base64urlpad:()=>i});var n=r(/*! ./base.js */"./node_modules/multiformats/esm/src/bases/base.js");const s=(0,n.rfc4648)({prefix:"m",name:"base64",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",bitsPerChar:6}),o=(0,n.rfc4648)({prefix:"M",name:"base64pad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",bitsPerChar:6}),a=(0,n.rfc4648)({prefix:"u",name:"base64url",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",bitsPerChar:6}),i=(0,n.rfc4648)({prefix:"U",name:"base64urlpad",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",bitsPerChar:6})},"./node_modules/multiformats/esm/src/bases/base8.js":
/*!**********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/base8.js ***!
  \**********************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{base8:()=>n});const n=(0,r(/*! ./base.js */"./node_modules/multiformats/esm/src/bases/base.js").rfc4648)({prefix:"7",name:"base8",alphabet:"01234567",bitsPerChar:3})},"./node_modules/multiformats/esm/src/bases/identity.js":
/*!*************************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bases/identity.js ***!
  \*************************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{identity:()=>o});var n=r(/*! ./base.js */"./node_modules/multiformats/esm/src/bases/base.js"),s=r(/*! ../bytes.js */"./node_modules/multiformats/esm/src/bytes.js");const o=(0,n.from)({prefix:"\0",name:"identity",encode:e=>(0,s.toString)(e),decode:e=>(0,s.fromString)(e)})},"./node_modules/multiformats/esm/src/basics.js":
/*!*****************************************************!*\
  !*** ./node_modules/multiformats/esm/src/basics.js ***!
  \*****************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{CID:()=>b.CID,hasher:()=>b.hasher,digest:()=>b.digest,varint:()=>b.varint,bytes:()=>b.bytes,hashes:()=>v,bases:()=>y,codecs:()=>w});var n=r(/*! ./bases/identity.js */"./node_modules/multiformats/esm/src/bases/identity.js"),s=r(/*! ./bases/base2.js */"./node_modules/multiformats/esm/src/bases/base2.js"),o=r(/*! ./bases/base8.js */"./node_modules/multiformats/esm/src/bases/base8.js"),a=r(/*! ./bases/base10.js */"./node_modules/multiformats/esm/src/bases/base10.js"),i=r(/*! ./bases/base16.js */"./node_modules/multiformats/esm/src/bases/base16.js"),c=r(/*! ./bases/base32.js */"./node_modules/multiformats/esm/src/bases/base32.js"),u=r(/*! ./bases/base36.js */"./node_modules/multiformats/esm/src/bases/base36.js"),d=r(/*! ./bases/base58.js */"./node_modules/multiformats/esm/src/bases/base58.js"),l=r(/*! ./bases/base64.js */"./node_modules/multiformats/esm/src/bases/base64.js"),p=r(/*! ./hashes/sha2.js */"./node_modules/multiformats/esm/src/hashes/sha2-browser.js"),h=r(/*! ./hashes/identity.js */"./node_modules/multiformats/esm/src/hashes/identity.js"),f=r(/*! ./codecs/raw.js */"./node_modules/multiformats/esm/src/codecs/raw.js"),m=r(/*! ./codecs/json.js */"./node_modules/multiformats/esm/src/codecs/json.js"),b=r(/*! ./index.js */"./node_modules/multiformats/esm/src/index.js");const y={...n,...s,...o,...a,...i,...c,...u,...d,...l},v={...p,...h},w={raw:f,json:m}},"./node_modules/multiformats/esm/src/bytes.js":
/*!****************************************************!*\
  !*** ./node_modules/multiformats/esm/src/bytes.js ***!
  \****************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{equals:()=>a,coerce:()=>i,isBinary:()=>c,fromHex:()=>o,toHex:()=>s,fromString:()=>u,toString:()=>d,empty:()=>n});const n=new Uint8Array(0),s=e=>e.reduce(((e,t)=>e+t.toString(16).padStart(2,"0")),""),o=e=>{const t=e.match(/../g);return t?new Uint8Array(t.map((e=>parseInt(e,16)))):n},a=(e,t)=>{if(e===t)return!0;if(e.byteLength!==t.byteLength)return!1;for(let r=0;r<e.byteLength;r++)if(e[r]!==t[r])return!1;return!0},i=e=>{if(e instanceof Uint8Array&&"Uint8Array"===e.constructor.name)return e;if(e instanceof ArrayBuffer)return new Uint8Array(e);if(ArrayBuffer.isView(e))return new Uint8Array(e.buffer,e.byteOffset,e.byteLength);throw new Error("Unknown type, must be binary type")},c=e=>e instanceof ArrayBuffer||ArrayBuffer.isView(e),u=e=>(new TextEncoder).encode(e),d=e=>(new TextDecoder).decode(e)},"./node_modules/multiformats/esm/src/cid.js":
/*!**************************************************!*\
  !*** ./node_modules/multiformats/esm/src/cid.js ***!
  \**************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{CID:()=>c});var n=r(/*! ./varint.js */"./node_modules/multiformats/esm/src/varint.js"),s=r(/*! ./hashes/digest.js */"./node_modules/multiformats/esm/src/hashes/digest.js"),o=r(/*! ./bases/base58.js */"./node_modules/multiformats/esm/src/bases/base58.js"),a=r(/*! ./bases/base32.js */"./node_modules/multiformats/esm/src/bases/base32.js"),i=r(/*! ./bytes.js */"./node_modules/multiformats/esm/src/bytes.js");class c{constructor(e,t,r,n){this.code=t,this.version=e,this.multihash=r,this.bytes=n,this.byteOffset=n.byteOffset,this.byteLength=n.byteLength,this.asCID=this,this._baseCache=new Map,Object.defineProperties(this,{byteOffset:y,byteLength:y,code:b,version:b,multihash:b,bytes:b,_baseCache:y,asCID:y})}toV0(){switch(this.version){case 0:return this;default:{const{code:e,multihash:t}=this;if(e!==p)throw new Error("Cannot convert a non dag-pb CID to CIDv0");if(t.code!==h)throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");return c.createV0(t)}}}toV1(){switch(this.version){case 0:{const{code:e,digest:t}=this.multihash,r=s.create(e,t);return c.createV1(this.code,r)}case 1:return this;default:throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`)}}equals(e){return e&&this.code===e.code&&this.version===e.version&&s.equals(this.multihash,e.multihash)}toString(e){const{bytes:t,version:r,_baseCache:n}=this;switch(r){case 0:return d(t,n,e||o.base58btc.encoder);default:return l(t,n,e||a.base32.encoder)}}toJSON(){return{code:this.code,version:this.version,hash:this.multihash.bytes}}get[Symbol.toStringTag](){return"CID"}[Symbol.for("nodejs.util.inspect.custom")](){return"CID("+this.toString()+")"}static isCID(e){return v(/^0\.0/,w),!(!e||!e[m]&&e.asCID!==e)}get toBaseEncodedString(){throw new Error("Deprecated, use .toString()")}get codec(){throw new Error('"codec" property is deprecated, use integer "code" property instead')}get buffer(){throw new Error("Deprecated .buffer property, use .bytes to get Uint8Array instead")}get multibaseName(){throw new Error('"multibaseName" property is deprecated')}get prefix(){throw new Error('"prefix" property is deprecated')}static asCID(e){if(e instanceof c)return e;if(null!=e&&e.asCID===e){const{version:t,code:r,multihash:n,bytes:s}=e;return new c(t,r,n,s||f(t,r,n.bytes))}if(null!=e&&!0===e[m]){const{version:t,multihash:r,code:n}=e,o=s.decode(r);return c.create(t,n,o)}return null}static create(e,t,r){if("number"!=typeof t)throw new Error("String codecs are no longer supported");switch(e){case 0:if(t!==p)throw new Error(`Version 0 CID must use dag-pb (code: ${p}) block encoding`);return new c(e,t,r,r.bytes);case 1:{const n=f(e,t,r.bytes);return new c(e,t,r,n)}default:throw new Error("Invalid version")}}static createV0(e){return c.create(0,p,e)}static createV1(e,t){return c.create(1,e,t)}static decode(e){const[t,r]=c.decodeFirst(e);if(r.length)throw new Error("Incorrect length");return t}static decodeFirst(e){const t=c.inspectBytes(e),r=t.size-t.multihashSize,n=(0,i.coerce)(e.subarray(r,r+t.multihashSize));if(n.byteLength!==t.multihashSize)throw new Error("Incorrect length");const o=n.subarray(t.multihashSize-t.digestSize),a=new s.Digest(t.multihashCode,t.digestSize,o,n);return[0===t.version?c.createV0(a):c.createV1(t.codec,a),e.subarray(t.size)]}static inspectBytes(e){let t=0;const r=()=>{const[r,s]=n.decode(e.subarray(t));return t+=s,r};let s=r(),o=p;if(18===s?(s=0,t=0):1===s&&(o=r()),0!==s&&1!==s)throw new RangeError(`Invalid CID version ${s}`);const a=t,i=r(),c=r(),u=t+c;return{version:s,codec:o,multihashCode:i,digestSize:c,multihashSize:u-a,size:u}}static parse(e,t){const[r,n]=u(e,t),s=c.decode(n);return s._baseCache.set(r,e),s}}const u=(e,t)=>{switch(e[0]){case"Q":{const r=t||o.base58btc;return[o.base58btc.prefix,r.decode(`${o.base58btc.prefix}${e}`)]}case o.base58btc.prefix:{const r=t||o.base58btc;return[o.base58btc.prefix,r.decode(e)]}case a.base32.prefix:{const r=t||a.base32;return[a.base32.prefix,r.decode(e)]}default:if(null==t)throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");return[e[0],t.decode(e)]}},d=(e,t,r)=>{const{prefix:n}=r;if(n!==o.base58btc.prefix)throw Error(`Cannot string encode V0 in ${r.name} encoding`);const s=t.get(n);if(null==s){const s=r.encode(e).slice(1);return t.set(n,s),s}return s},l=(e,t,r)=>{const{prefix:n}=r,s=t.get(n);if(null==s){const s=r.encode(e);return t.set(n,s),s}return s},p=112,h=18,f=(e,t,r)=>{const s=n.encodingLength(e),o=s+n.encodingLength(t),a=new Uint8Array(o+r.byteLength);return n.encodeTo(e,a,0),n.encodeTo(t,a,s),a.set(r,o),a},m=Symbol.for("@ipld/js-cid/CID"),b={writable:!1,configurable:!1,enumerable:!0},y={writable:!1,enumerable:!1,configurable:!1},v=(e,t)=>{if(!e.test("0.0.0-dev"))throw new Error(t);console.warn(t)},w="CID.isCID(v) is deprecated and will be removed in the next major release.\nFollowing code pattern:\n\nif (CID.isCID(value)) {\n  doSomethingWithCID(value)\n}\n\nIs replaced with:\n\nconst cid = CID.asCID(value)\nif (cid) {\n  // Make sure to use cid instead of value\n  doSomethingWithCID(cid)\n}\n"},"./node_modules/multiformats/esm/src/codecs/json.js":
/*!**********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/codecs/json.js ***!
  \**********************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{name:()=>n,code:()=>s,encode:()=>o,decode:()=>a});const{name:n,code:s,encode:o,decode:a}={name:"json",code:512,encode:e=>(new TextEncoder).encode(JSON.stringify(e)),decode:e=>JSON.parse((new TextDecoder).decode(e))}},"./node_modules/multiformats/esm/src/codecs/raw.js":
/*!*********************************************************!*\
  !*** ./node_modules/multiformats/esm/src/codecs/raw.js ***!
  \*********************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{name:()=>o,code:()=>a,encode:()=>i,decode:()=>c});var n=r(/*! ../bytes.js */"./node_modules/multiformats/esm/src/bytes.js");const s=e=>(0,n.coerce)(e),{name:o,code:a,encode:i,decode:c}={name:"raw",code:85,decode:s,encode:s}},"./node_modules/multiformats/esm/src/hashes/digest.js":
/*!************************************************************!*\
  !*** ./node_modules/multiformats/esm/src/hashes/digest.js ***!
  \************************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{create:()=>o,decode:()=>a,equals:()=>i,Digest:()=>c});var n=r(/*! ../bytes.js */"./node_modules/multiformats/esm/src/bytes.js"),s=r(/*! ../varint.js */"./node_modules/multiformats/esm/src/varint.js");const o=(e,t)=>{const r=t.byteLength,n=s.encodingLength(e),o=n+s.encodingLength(r),a=new Uint8Array(o+r);return s.encodeTo(e,a,0),s.encodeTo(r,a,n),a.set(t,o),new c(e,r,t,a)},a=e=>{const t=(0,n.coerce)(e),[r,o]=s.decode(t),[a,i]=s.decode(t.subarray(o)),u=t.subarray(o+i);if(u.byteLength!==a)throw new Error("Incorrect length");return new c(r,a,u,t)},i=(e,t)=>e===t||e.code===t.code&&e.size===t.size&&(0,n.equals)(e.bytes,t.bytes);class c{constructor(e,t,r,n){this.code=e,this.size=t,this.digest=r,this.bytes=n}}},"./node_modules/multiformats/esm/src/hashes/hasher.js":
/*!************************************************************!*\
  !*** ./node_modules/multiformats/esm/src/hashes/hasher.js ***!
  \************************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{from:()=>s,Hasher:()=>o});var n=r(/*! ./digest.js */"./node_modules/multiformats/esm/src/hashes/digest.js");const s=({name:e,code:t,encode:r})=>new o(e,t,r);class o{constructor(e,t,r){this.name=e,this.code=t,this.encode=r}async digest(e){if(e instanceof Uint8Array){const t=await this.encode(e);return n.create(this.code,t)}throw Error("Unknown type, must be binary type")}}},"./node_modules/multiformats/esm/src/hashes/identity.js":
/*!**************************************************************!*\
  !*** ./node_modules/multiformats/esm/src/hashes/identity.js ***!
  \**************************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{identity:()=>o});var n=r(/*! ./hasher.js */"./node_modules/multiformats/esm/src/hashes/hasher.js"),s=r(/*! ../bytes.js */"./node_modules/multiformats/esm/src/bytes.js");const o=(0,n.from)({name:"identity",code:0,encode:e=>(0,s.coerce)(e)})},"./node_modules/multiformats/esm/src/hashes/sha2-browser.js":
/*!******************************************************************!*\
  !*** ./node_modules/multiformats/esm/src/hashes/sha2-browser.js ***!
  \******************************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{sha256:()=>o,sha512:()=>a});var n=r(/*! ./hasher.js */"./node_modules/multiformats/esm/src/hashes/hasher.js");const s=e=>async t=>new Uint8Array(await crypto.subtle.digest(e,t)),o=(0,n.from)({name:"sha2-256",code:18,encode:s("SHA-256")}),a=(0,n.from)({name:"sha2-512",code:19,encode:s("SHA-512")})},"./node_modules/multiformats/esm/src/index.js":
/*!****************************************************!*\
  !*** ./node_modules/multiformats/esm/src/index.js ***!
  \****************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{CID:()=>n.CID,hasher:()=>a,digest:()=>i,varint:()=>s,bytes:()=>o});var n=r(/*! ./cid.js */"./node_modules/multiformats/esm/src/cid.js"),s=r(/*! ./varint.js */"./node_modules/multiformats/esm/src/varint.js"),o=r(/*! ./bytes.js */"./node_modules/multiformats/esm/src/bytes.js"),a=r(/*! ./hashes/hasher.js */"./node_modules/multiformats/esm/src/hashes/hasher.js"),i=r(/*! ./hashes/digest.js */"./node_modules/multiformats/esm/src/hashes/digest.js")},"./node_modules/multiformats/esm/src/varint.js":
/*!*****************************************************!*\
  !*** ./node_modules/multiformats/esm/src/varint.js ***!
  \*****************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{decode:()=>s,encodeTo:()=>o,encodingLength:()=>a});var n=r(/*! ../vendor/varint.js */"./node_modules/multiformats/esm/vendor/varint.js");const s=e=>[n.default.decode(e),n.default.decode.bytes],o=(e,t,r=0)=>(n.default.encode(e,t,r),t),a=e=>n.default.encodingLength(e)},"./node_modules/multiformats/esm/vendor/base-x.js":
/*!********************************************************!*\
  !*** ./node_modules/multiformats/esm/vendor/base-x.js ***!
  \********************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>n});const n=function(e,t){if(e.length>=255)throw new TypeError("Alphabet too long");for(var r=new Uint8Array(256),n=0;n<r.length;n++)r[n]=255;for(var s=0;s<e.length;s++){var o=e.charAt(s),a=o.charCodeAt(0);if(255!==r[a])throw new TypeError(o+" is ambiguous");r[a]=s}var i=e.length,c=e.charAt(0),u=Math.log(i)/Math.log(256),d=Math.log(256)/Math.log(i);function l(e){if("string"!=typeof e)throw new TypeError("Expected String");if(0===e.length)return new Uint8Array;var t=0;if(" "!==e[t]){for(var n=0,s=0;e[t]===c;)n++,t++;for(var o=(e.length-t)*u+1>>>0,a=new Uint8Array(o);e[t];){var d=r[e.charCodeAt(t)];if(255===d)return;for(var l=0,p=o-1;(0!==d||l<s)&&-1!==p;p--,l++)d+=i*a[p]>>>0,a[p]=d%256>>>0,d=d/256>>>0;if(0!==d)throw new Error("Non-zero carry");s=l,t++}if(" "!==e[t]){for(var h=o-s;h!==o&&0===a[h];)h++;for(var f=new Uint8Array(n+(o-h)),m=n;h!==o;)f[m++]=a[h++];return f}}}return{encode:function(t){if(t instanceof Uint8Array||(ArrayBuffer.isView(t)?t=new Uint8Array(t.buffer,t.byteOffset,t.byteLength):Array.isArray(t)&&(t=Uint8Array.from(t))),!(t instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(0===t.length)return"";for(var r=0,n=0,s=0,o=t.length;s!==o&&0===t[s];)s++,r++;for(var a=(o-s)*d+1>>>0,u=new Uint8Array(a);s!==o;){for(var l=t[s],p=0,h=a-1;(0!==l||p<n)&&-1!==h;h--,p++)l+=256*u[h]>>>0,u[h]=l%i>>>0,l=l/i>>>0;if(0!==l)throw new Error("Non-zero carry");n=p,s++}for(var f=a-n;f!==a&&0===u[f];)f++;for(var m=c.repeat(r);f<a;++f)m+=e.charAt(u[f]);return m},decodeUnsafe:l,decode:function(e){var r=l(e);if(r)return r;throw new Error(`Non-${t} character`)}}}},"./node_modules/multiformats/esm/vendor/varint.js":
/*!********************************************************!*\
  !*** ./node_modules/multiformats/esm/vendor/varint.js ***!
  \********************************************************/(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>m});var n=function e(t,r,n){r=r||[];var o=n=n||0;for(;t>=s;)r[n++]=255&t|128,t/=128;for(;-128&t;)r[n++]=255&t|128,t>>>=7;return r[n]=0|t,e.bytes=n-o+1,r},s=Math.pow(2,31);var o=function e(t,r){var n,s=0,o=0,a=r=r||0,i=t.length;do{if(a>=i)throw e.bytes=0,new RangeError("Could not decode varint");n=t[a++],s+=o<28?(127&n)<<o:(127&n)*Math.pow(2,o),o+=7}while(n>=128);return e.bytes=a-r,s};var a=Math.pow(2,7),i=Math.pow(2,14),c=Math.pow(2,21),u=Math.pow(2,28),d=Math.pow(2,35),l=Math.pow(2,42),p=Math.pow(2,49),h=Math.pow(2,56),f=Math.pow(2,63);const m={encode:n,decode:o,encodingLength:function(e){return e<a?1:e<i?2:e<c?3:e<u?4:e<d?5:e<l?6:e<p?7:e<h?8:e<f?9:10}}},"./node_modules/uint8arrays/concat.js":
/*!********************************************!*\
  !*** ./node_modules/uint8arrays/concat.js ***!
  \********************************************/e=>{"use strict";e.exports=function(e,t){t||(t=e.reduce(((e,t)=>e+t.length),0));const r=new Uint8Array(t);let n=0;for(const t of e)r.set(t,n),n+=t.length;return r}},"./node_modules/uint8arrays/equals.js":
/*!********************************************!*\
  !*** ./node_modules/uint8arrays/equals.js ***!
  \********************************************/e=>{"use strict";e.exports=function(e,t){if(e===t)return!0;if(e.byteLength!==t.byteLength)return!1;for(let r=0;r<e.byteLength;r++)if(e[r]!==t[r])return!1;return!0}},"./node_modules/uint8arrays/from-string.js":
/*!*************************************************!*\
  !*** ./node_modules/uint8arrays/from-string.js ***!
  \*************************************************/(e,t,r)=>{"use strict";const n=r(/*! ./util/bases */"./node_modules/uint8arrays/util/bases.js");e.exports=function(e,t="utf8"){const r=n[t];if(!r)throw new Error(`Unsupported encoding "${t}"`);return r.decoder.decode(`${r.prefix}${e}`)}},"./node_modules/uint8arrays/to-string.js":
/*!***********************************************!*\
  !*** ./node_modules/uint8arrays/to-string.js ***!
  \***********************************************/(e,t,r)=>{"use strict";const n=r(/*! ./util/bases */"./node_modules/uint8arrays/util/bases.js");e.exports=function(e,t="utf8"){const r=n[t];if(!r)throw new Error(`Unsupported encoding "${t}"`);return r.encoder.encode(e).substring(1)}},"./node_modules/uint8arrays/util/bases.js":
/*!************************************************!*\
  !*** ./node_modules/uint8arrays/util/bases.js ***!
  \************************************************/(e,t,r)=>{"use strict";const{bases:n}=r(/*! multiformats/basics */"./node_modules/multiformats/esm/src/basics.js");function s(e,t,r,n){return{name:e,prefix:t,encoder:{name:e,prefix:t,encode:r},decoder:{decode:n}}}const o=s("utf8","u",(e=>"u"+new TextDecoder("utf8").decode(e)),(e=>(new TextEncoder).encode(e.substring(1)))),a=s("ascii","a",(e=>{let t="a";for(let r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t}),(e=>{e=e.substring(1);const t=new Uint8Array(e.length);for(let r=0;r<e.length;r++)t[r]=e.charCodeAt(r);return t})),i={utf8:o,"utf-8":o,hex:n.base16,latin1:a,ascii:a,binary:a,...n};e.exports=i},"./node_modules/varint/decode.js":
/*!***************************************!*\
  !*** ./node_modules/varint/decode.js ***!
  \***************************************/e=>{e.exports=function e(t,r){var n,s=0,o=0,a=r=r||0,i=t.length;do{if(a>=i||o>49)throw e.bytes=0,new RangeError("Could not decode varint");n=t[a++],s+=o<28?(127&n)<<o:(127&n)*Math.pow(2,o),o+=7}while(n>=128);return e.bytes=a-r,s}},"./node_modules/varint/encode.js":
/*!***************************************!*\
  !*** ./node_modules/varint/encode.js ***!
  \***************************************/e=>{e.exports=function e(r,n,s){if(Number.MAX_SAFE_INTEGER&&r>Number.MAX_SAFE_INTEGER)throw e.bytes=0,new RangeError("Could not encode varint");n=n||[];var o=s=s||0;for(;r>=t;)n[s++]=255&r|128,r/=128;for(;-128&r;)n[s++]=255&r|128,r>>>=7;return n[s]=0|r,e.bytes=s-o+1,n};var t=Math.pow(2,31)},"./node_modules/varint/index.js":
/*!**************************************!*\
  !*** ./node_modules/varint/index.js ***!
  \**************************************/(e,t,r)=>{e.exports={encode:r(/*! ./encode.js */"./node_modules/varint/encode.js"),decode:r(/*! ./decode.js */"./node_modules/varint/decode.js"),encodingLength:r(/*! ./length.js */"./node_modules/varint/length.js")}},"./node_modules/varint/length.js":
/*!***************************************!*\
  !*** ./node_modules/varint/length.js ***!
  \***************************************/e=>{var t=Math.pow(2,7),r=Math.pow(2,14),n=Math.pow(2,21),s=Math.pow(2,28),o=Math.pow(2,35),a=Math.pow(2,42),i=Math.pow(2,49),c=Math.pow(2,56),u=Math.pow(2,63);e.exports=function(e){return e<t?1:e<r?2:e<n?3:e<s?4:e<o?5:e<a?6:e<i?7:e<c?8:e<u?9:10}}},t={};function r(n){var s=t[n];if(void 0!==s)return s.exports;var o=t[n]={id:n,loaded:!1,exports:{}};return e[n](o,o.exports,r),o.loaded=!0,o.exports}r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.nmd=e=>(e.paths=[],e.children||(e.children=[]),e);var n={};return(()=>{"use strict";
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/r.r(n),r.d(n,{default:()=>g});var e=r(/*! lodash.merge */"./node_modules/lodash.merge/index.js"),t=r.n(e),s=r(/*! ./util/validators */"./src/util/validators.js"),o=r(/*! ./util/errorResponse */"./src/util/errorResponse.js"),a=r(/*! ./commands/pinning/pinByHash */"./src/commands/pinning/pinByHash.js"),i=r(/*! ./commands/pinning/hashMetadata */"./src/commands/pinning/hashMetadata.js"),c=r(/*! ./commands/pinning/hashPinPolicy */"./src/commands/pinning/hashPinPolicy.js"),u=r(/*! ./commands/pinning/pinFileToIPFS */"./src/commands/pinning/pinFileToIPFS.js"),d=r(/*! ./commands/pinning/pinJSONToIPFS */"./src/commands/pinning/pinJSONToIPFS.js"),l=r(/*! ./commands/pinning/pinJobs/pinJobs */"./src/commands/pinning/pinJobs/pinJobs.js"),p=r(/*! ./commands/pinning/unpin */"./src/commands/pinning/unpin.js"),h=r(/*! ./commands/pinning/userPinPolicy */"./src/commands/pinning/userPinPolicy.js"),f=r(/*! ./commands/data/testAuthentication */"./src/commands/data/testAuthentication.js"),m=r(/*! ./commands/data/pinList/pinList */"./src/commands/data/pinList/pinList.js"),b=r(/*! ./commands/data/userPinnedDataTotal */"./src/commands/data/userPinnedDataTotal.js");function y(e,t,r,n,s,o,a){try{var i=e[o](a),c=i.value}catch(e){return void r(e)}i.done?t(c):Promise.resolve(c).then(n,s)}function v(e){return function(){var t=this,r=arguments;return new Promise((function(n,s){var o=e.apply(t,r);function a(e){y(o,n,s,a,i,"next",e)}function i(e){y(o,n,s,a,i,"throw",e)}a(void 0)}))}}function w(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}const g=function(){function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!t||!t.length)throw new Error("Invalid Pinata JWT: "+t);this.jwt=t,this.baseURL="https://api.pinata.cloud",this.defaultOpts={headers:{Authorization:"Bearer ".concat(this.jwt)}},this.handleError=o.default.bind(this),this.validateJWT=s.validateJWT.bind(this),this.validateHostNodes=s.validateHostNodes.bind(this),this.validateMetadata=s.validateMetadata.bind(this),this.validatePinPolicyStructure=s.validatePinPolicyStructure.bind(this),this.validatePinataOptions=s.validatePinataOptions.bind(this),this.pinByHash=a.default.bind(this),this.hashMetadata=i.default.bind(this),this.hashPinPolicy=c.default.bind(this),this.pinFileToIPFS=u.default.bind(this),this.pinJSONToIPFS=d.default.bind(this),this.pinJobs=l.default.bind(this),this.unpin=p.default.bind(this),this.userPinPolicy=h.default.bind(this),this.testAuthentication=f.default.bind(this),this.pinList=m.default.bind(this),this.userPinnedDataTotal=b.default.bind(this)}var r,n,y,g,j,_,x;return r=e,(n=[{key:"makeUrl",value:function(e){return"".concat(this.baseURL,"/").concat(e)}},{key:"makeOpts",value:function(){for(var e=arguments.length,r=new Array(e),n=0;n<e;n++)r[n]=arguments[n];var s=t().apply(void 0,[this.defaultOpts].concat(r));return s.headers.Authorization=this.defaultOpts.headers.Authorization,s}},{key:"defaultInterceptor",value:function(e,t){return{url:e,options:t}}},{key:"fetch",value:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){var e=v(regeneratorRuntime.mark((function e(t){var r,n,s,o,a,i,c=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=c.length>1&&void 0!==c[1]?c[1]:{},n=c.length>2&&void 0!==c[2]?c[2]:this.defaultInterceptor,s=n(this.makeUrl(t),this.makeOpts(r)),o=s.url,a=s.options,e.next=5,fetch(o,a);case 5:return i=e.sent,e.abrupt("return",i);case 7:case"end":return e.stop()}}),e,this)})));return function(t){return e.apply(this,arguments)}}())},{key:"post",value:(x=v(regeneratorRuntime.mark((function e(t,r){var n,s,o,a,i,c,u=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=u.length>2&&void 0!==u[2]?u[2]:{},s=u.length>3&&void 0!==u[3]?u[3]:this.defaultInterceptor,o=s(this.makeUrl(t),this.makeOpts(n,{method:"POST",body:r})),a=o.url,i=o.options,console.log("@@post with opts",a,i),e.next=6,fetch(a,i);case 6:return c=e.sent,e.abrupt("return",c);case 8:case"end":return e.stop()}}),e,this)}))),function(e,t){return x.apply(this,arguments)})},{key:"postJSON",value:(_=v(regeneratorRuntime.mark((function e(t,r){var n,s=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=s.length>2&&void 0!==s[2]?s[2]:{},e.next=3,this.post(t,"string"==typeof r?r:JSON.stringify(r),n);case 3:return e.abrupt("return",e.sent);case 4:case"end":return e.stop()}}),e,this)}))),function(e,t){return _.apply(this,arguments)})},{key:"put",value:(j=v(regeneratorRuntime.mark((function e(t,r){var n,s,o,a,i,c,u=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=u.length>2&&void 0!==u[2]?u[2]:{},s=u.length>3&&void 0!==u[3]?u[3]:this.defaultInterceptor,o=s(this.makeUrl(t),this.makeOpts(n,{method:"PUT",body:"string"==typeof r?r:JSON.stringify(r)})),a=o.url,i=o.options,e.next=5,fetch(a,i);case 5:return c=e.sent,e.abrupt("return",c);case 7:case"end":return e.stop()}}),e,this)}))),function(e,t){return j.apply(this,arguments)})},{key:"del",value:(g=v(regeneratorRuntime.mark((function e(t){var r,n,s,o,a,i=arguments;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=i.length>1&&void 0!==i[1]?i[1]:this.defaultInterceptor,n=r(this.makeUrl(t),this.makeOpts({},{method:"DELETE"})),s=n.url,o=n.options,e.next=4,fetch(s,o);case 4:return a=e.sent,e.abrupt("return",a);case 6:case"end":return e.stop()}}),e,this)}))),function(e){return g.apply(this,arguments)})}])&&w(r.prototype,n),y&&w(r,y),e}()})(),n})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,